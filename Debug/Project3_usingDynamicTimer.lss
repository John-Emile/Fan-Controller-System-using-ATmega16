
Project3_usingDynamicTimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  00002c2e  00002cc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080018c  0080018c  00002dee  2**0
                  ALLOC
  3 .stab         000025ec  00000000  00000000  00002df0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017c8  00000000  00000000  000053dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006f36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009341  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a6c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b8a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000ba60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000bd56  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c6c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__vector_3>
      10:	0c 94 c4 12 	jmp	0x2588	; 0x2588 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <__vector_6>
      1c:	0c 94 91 12 	jmp	0x2522	; 0x2522 <__vector_7>
      20:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__vector_8>
      24:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7a 07 	call	0xef4	; 0xef4 <main>
      8a:	0c 94 15 16 	jmp	0x2c2a	; 0x2c2a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ad 15 	jmp	0x2b5a	; 0x2b5a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e7       	ldi	r26, 0x7D	; 125
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b9 15 	jmp	0x2b72	; 0x2b72 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b9 15 	jmp	0x2b72	; 0x2b72 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ad 15 	jmp	0x2b5a	; 0x2b5a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8d e7       	ldi	r24, 0x7D	; 125
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e7       	ldi	r22, 0x7D	; 125
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d1 15 	jmp	0x2ba2	; 0x2ba2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b9 15 	jmp	0x2b72	; 0x2b72 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b9 15 	jmp	0x2b72	; 0x2b72 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b9 15 	jmp	0x2b72	; 0x2b72 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 d1 15 	jmp	0x2ba2	; 0x2ba2 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	eb 57       	subi	r30, 0x7B	; 123
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/

/* Initialization using dynamic configuration */
void ADC_init(const ADC_ConfigType * Config_Ptr)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <ADC_init+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	 * ADMUX &3F to clear the 2 MSB and preserve the other bits
	 * <<6 to get bit 0 to be @6 + bit 1 to be @ 7 for REFS 1:0
	 */

	/* Insert the Reference voltage bits */
	ADMUX = (ADMUX & 0x3F) | ((Config_Ptr->ref_volt)<<6);
     e3c:	a7 e2       	ldi	r26, 0x27	; 39
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e7 e2       	ldi	r30, 0x27	; 39
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	28 2f       	mov	r18, r24
     e48:	2f 73       	andi	r18, 0x3F	; 63
     e4a:	e9 81       	ldd	r30, Y+1	; 0x01
     e4c:	fa 81       	ldd	r31, Y+2	; 0x02
     e4e:	80 81       	ld	r24, Z
     e50:	88 2f       	mov	r24, r24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	00 24       	eor	r0, r0
     e56:	96 95       	lsr	r25
     e58:	87 95       	ror	r24
     e5a:	07 94       	ror	r0
     e5c:	96 95       	lsr	r25
     e5e:	87 95       	ror	r24
     e60:	07 94       	ror	r0
     e62:	98 2f       	mov	r25, r24
     e64:	80 2d       	mov	r24, r0
     e66:	82 2b       	or	r24, r18
     e68:	8c 93       	st	X, r24

	/* ADCSRA Register Bits Description:
	 * ADEN = 1 -> Enable ADC
	 */
	ADCSRA = (1<<ADEN);
     e6a:	e6 e2       	ldi	r30, 0x26	; 38
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 e8       	ldi	r24, 0x80	; 128
     e70:	80 83       	st	Z, r24

	/* Insert the Pre-scaler bits
	 * Clear the 3 LSB
	 */
	ADCSRA = (ADCSRA & 0xF8) | (Config_Ptr->prescaler);
     e72:	a6 e2       	ldi	r26, 0x26	; 38
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e6 e2       	ldi	r30, 0x26	; 38
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	98 2f       	mov	r25, r24
     e7e:	98 7f       	andi	r25, 0xF8	; 248
     e80:	e9 81       	ldd	r30, Y+1	; 0x01
     e82:	fa 81       	ldd	r31, Y+2	; 0x02
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	89 2b       	or	r24, r25
     e88:	8c 93       	st	X, r24

}
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <ADC_readChannel>:

uint16 ADC_readChannel (uint8 ch_num)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	0f 92       	push	r0
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the channel number in ADMUX register
	 * Clear The LSB 5 bits and preserve the MSB as they can be used for other purpose (don't overwrite them)
	 * ADMUX & 1110 0000 (E0) = Preserve the MSB 3 bits and clear the rest
	 */
	ADMUX = (ADMUX & 0xE0 ) | (ch_num & 0x07);
     ea0:	a7 e2       	ldi	r26, 0x27	; 39
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e7 e2       	ldi	r30, 0x27	; 39
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	98 2f       	mov	r25, r24
     eac:	90 7e       	andi	r25, 0xE0	; 224
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	87 70       	andi	r24, 0x07	; 7
     eb2:	89 2b       	or	r24, r25
     eb4:	8c 93       	st	X, r24

	/* Start conversion */
	SET_BIT(ADCSRA,ADSC);
     eb6:	a6 e2       	ldi	r26, 0x26	; 38
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e6 e2       	ldi	r30, 0x26	; 38
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	80 64       	ori	r24, 0x40	; 64
     ec2:	8c 93       	st	X, r24

	/* Wait until ADIF = 1 (Interrupt flag is set) -> Polling technique */
	while (BIT_IS_CLEAR(ADCSRA,ADIF));
     ec4:	e6 e2       	ldi	r30, 0x26	; 38
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	88 2f       	mov	r24, r24
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	80 71       	andi	r24, 0x10	; 16
     ed0:	90 70       	andi	r25, 0x00	; 0
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	b9 f3       	breq	.-18     	; 0xec4 <ADC_readChannel+0x30>

	/* Clear the flag by writing 1 to it*/
	SET_BIT(ADCSRA,ADIF);
     ed6:	a6 e2       	ldi	r26, 0x26	; 38
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e6 e2       	ldi	r30, 0x26	; 38
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	80 61       	ori	r24, 0x10	; 16
     ee2:	8c 93       	st	X, r24

	/*Return the digital value of ADC register which contains our 10 bits*/
	return ADC;
     ee4:	e4 e2       	ldi	r30, 0x24	; 36
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	91 81       	ldd	r25, Z+1	; 0x01

}
     eec:	0f 90       	pop	r0
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <main>:
#include "motor.h"
#include "lcd.h"
#include "lm35_sensor.h"

int main(void)
{
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	00 d0       	rcall	.+0      	; 0xefa <main+0x6>
     efa:	00 d0       	rcall	.+0      	; 0xefc <main+0x8>
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
	/* To hold the value returned from the sensor by ADC */
	uint8 temperature = 0;
     f00:	1a 82       	std	Y+2, r1	; 0x02
	uint8 speed = 0;
     f02:	19 82       	std	Y+1, r1	; 0x01

	/* Struct with name adc_configuration with type ADC_ConfigType to hold ADC module desirable configuration */
	ADC_ConfigType adc_configuration = { ADC_INTERNAL_VOLTAGE , ADC_PRESCALER_DIVISION_FACTOR_8 };
     f04:	83 e0       	ldi	r24, 0x03	; 3
     f06:	8b 83       	std	Y+3, r24	; 0x03
     f08:	83 e0       	ldi	r24, 0x03	; 3
     f0a:	8c 83       	std	Y+4, r24	; 0x04

	/* Initialization of modules */
	LCD_init();
     f0c:	0e 94 47 0b 	call	0x168e	; 0x168e <LCD_init>
	ADC_init(&adc_configuration);
     f10:	ce 01       	movw	r24, r28
     f12:	03 96       	adiw	r24, 0x03	; 3
     f14:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_init>
	DCMOTOR_init();
     f18:	0e 94 63 10 	call	0x20c6	; 0x20c6 <DCMOTOR_init>

	/* Display only once */
	LCD_displayStringRowColumn(0,3,"FAN IS ");
     f1c:	20 e6       	ldi	r18, 0x60	; 96
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	63 e0       	ldi	r22, 0x03	; 3
     f24:	a9 01       	movw	r20, r18
     f26:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <LCD_displayStringRowColumn>

	/* Move cursor to the second row */
	LCD_moveCursor(1,3);
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	63 e0       	ldi	r22, 0x03	; 3
     f2e:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <LCD_moveCursor>
	LCD_displayString("TEMP =     C");
     f32:	88 e6       	ldi	r24, 0x68	; 104
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <LCD_displayString>

	for(;;)
	{
		/* Get the value from the sensor and display on LCD */
		temperature = LM35_getTemperature();
     f3a:	0e 94 03 10 	call	0x2006	; 0x2006 <LM35_getTemperature>
     f3e:	8a 83       	std	Y+2, r24	; 0x02

		LCD_moveCursor(1,10);
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	6a e0       	ldi	r22, 0x0A	; 10
     f44:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <LCD_moveCursor>
		LM35_displayTemperature(temperature);
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	0e 94 48 10 	call	0x2090	; 0x2090 <LM35_displayTemperature>

		if (temperature<30)
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	8e 31       	cpi	r24, 0x1E	; 30
     f52:	68 f4       	brcc	.+26     	; 0xf6e <main+0x7a>
		{
			/* Fan State */
			LCD_displayStringRowColumn(0,10,"OFF");
     f54:	25 e7       	ldi	r18, 0x75	; 117
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	6a e0       	ldi	r22, 0x0A	; 10
     f5c:	a9 01       	movw	r20, r18
     f5e:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <LCD_displayStringRowColumn>

			/* Set speed based on the temperature,Send it to motor. */
			speed = 0;
     f62:	19 82       	std	Y+1, r1	; 0x01
			DCMotor_Rotate(DC_MOTOR_STOP,speed);
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	69 81       	ldd	r22, Y+1	; 0x01
     f68:	0e 94 7e 10 	call	0x20fc	; 0x20fc <DCMotor_Rotate>
     f6c:	e6 cf       	rjmp	.-52     	; 0xf3a <main+0x46>
		}

		else if ( (temperature>=30) && (temperature<60) )
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	8e 31       	cpi	r24, 0x1E	; 30
     f72:	88 f0       	brcs	.+34     	; 0xf96 <main+0xa2>
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	8c 33       	cpi	r24, 0x3C	; 60
     f78:	70 f4       	brcc	.+28     	; 0xf96 <main+0xa2>
		{
			/* Show the fan state */
			LCD_displayStringRowColumn(0,10,"ON ");
     f7a:	29 e7       	ldi	r18, 0x79	; 121
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	6a e0       	ldi	r22, 0x0A	; 10
     f82:	a9 01       	movw	r20, r18
     f84:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <LCD_displayStringRowColumn>

			/* Set speed based on the temperature,Send it to motor. */
			speed = 25;
     f88:	89 e1       	ldi	r24, 0x19	; 25
     f8a:	89 83       	std	Y+1, r24	; 0x01
			DCMotor_Rotate(DC_MOTOR_CLOCKWISE,speed);
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	69 81       	ldd	r22, Y+1	; 0x01
     f90:	0e 94 7e 10 	call	0x20fc	; 0x20fc <DCMotor_Rotate>
     f94:	d2 cf       	rjmp	.-92     	; 0xf3a <main+0x46>
		}

		else if ( (temperature>=60) && (temperature<90) )
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	8c 33       	cpi	r24, 0x3C	; 60
     f9a:	88 f0       	brcs	.+34     	; 0xfbe <main+0xca>
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	8a 35       	cpi	r24, 0x5A	; 90
     fa0:	70 f4       	brcc	.+28     	; 0xfbe <main+0xca>
		{
			/* Show the fan state */
			LCD_displayStringRowColumn(0,10,"ON ");
     fa2:	29 e7       	ldi	r18, 0x79	; 121
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	6a e0       	ldi	r22, 0x0A	; 10
     faa:	a9 01       	movw	r20, r18
     fac:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <LCD_displayStringRowColumn>

			/* Set speed based on the temperature,Send it to motor. */
			speed = 50;
     fb0:	82 e3       	ldi	r24, 0x32	; 50
     fb2:	89 83       	std	Y+1, r24	; 0x01
			DCMotor_Rotate(DC_MOTOR_CLOCKWISE,speed);
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	69 81       	ldd	r22, Y+1	; 0x01
     fb8:	0e 94 7e 10 	call	0x20fc	; 0x20fc <DCMotor_Rotate>
     fbc:	be cf       	rjmp	.-132    	; 0xf3a <main+0x46>
		}

		else if ( (temperature>=90) && (temperature<120) )
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	8a 35       	cpi	r24, 0x5A	; 90
     fc2:	88 f0       	brcs	.+34     	; 0xfe6 <main+0xf2>
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	88 37       	cpi	r24, 0x78	; 120
     fc8:	70 f4       	brcc	.+28     	; 0xfe6 <main+0xf2>
		{
			/* Show the fan state */
			LCD_displayStringRowColumn(0,10,"ON ");
     fca:	29 e7       	ldi	r18, 0x79	; 121
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	6a e0       	ldi	r22, 0x0A	; 10
     fd2:	a9 01       	movw	r20, r18
     fd4:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <LCD_displayStringRowColumn>

			/* Set speed based on the temperature,Send it to motor. */
			speed = 75;
     fd8:	8b e4       	ldi	r24, 0x4B	; 75
     fda:	89 83       	std	Y+1, r24	; 0x01
			DCMotor_Rotate(DC_MOTOR_CLOCKWISE,speed);
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	69 81       	ldd	r22, Y+1	; 0x01
     fe0:	0e 94 7e 10 	call	0x20fc	; 0x20fc <DCMotor_Rotate>
     fe4:	aa cf       	rjmp	.-172    	; 0xf3a <main+0x46>
		}
		else if ((temperature>=120) && (temperature<=150)) /* LM35 has a maximum of 150C */
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	88 37       	cpi	r24, 0x78	; 120
     fea:	08 f4       	brcc	.+2      	; 0xfee <main+0xfa>
     fec:	a6 cf       	rjmp	.-180    	; 0xf3a <main+0x46>
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	87 39       	cpi	r24, 0x97	; 151
     ff2:	08 f0       	brcs	.+2      	; 0xff6 <main+0x102>
     ff4:	a2 cf       	rjmp	.-188    	; 0xf3a <main+0x46>
		{
			/* Show the fan state */
			LCD_displayStringRowColumn(0,10,"ON ");
     ff6:	29 e7       	ldi	r18, 0x79	; 121
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	6a e0       	ldi	r22, 0x0A	; 10
     ffe:	a9 01       	movw	r20, r18
    1000:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <LCD_displayStringRowColumn>

			/* Set speed based on the temperature,Send it to motor. */
			speed = 100;
    1004:	84 e6       	ldi	r24, 0x64	; 100
    1006:	89 83       	std	Y+1, r24	; 0x01
			DCMotor_Rotate(DC_MOTOR_CLOCKWISE,speed);
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	69 81       	ldd	r22, Y+1	; 0x01
    100c:	0e 94 7e 10 	call	0x20fc	; 0x20fc <DCMotor_Rotate>
    1010:	94 cf       	rjmp	.-216    	; 0xf3a <main+0x46>

00001012 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <GPIO_setupPinDirection+0x6>
    1018:	00 d0       	rcall	.+0      	; 0x101a <GPIO_setupPinDirection+0x8>
    101a:	0f 92       	push	r0
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	6a 83       	std	Y+2, r22	; 0x02
    1024:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	88 30       	cpi	r24, 0x08	; 8
    102a:	08 f0       	brcs	.+2      	; 0x102e <GPIO_setupPinDirection+0x1c>
    102c:	d5 c0       	rjmp	.+426    	; 0x11d8 <GPIO_setupPinDirection+0x1c6>
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	84 30       	cpi	r24, 0x04	; 4
    1032:	08 f0       	brcs	.+2      	; 0x1036 <GPIO_setupPinDirection+0x24>
    1034:	d1 c0       	rjmp	.+418    	; 0x11d8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	3d 83       	std	Y+5, r19	; 0x05
    103e:	2c 83       	std	Y+4, r18	; 0x04
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	9d 81       	ldd	r25, Y+5	; 0x05
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	91 05       	cpc	r25, r1
    1048:	09 f4       	brne	.+2      	; 0x104c <GPIO_setupPinDirection+0x3a>
    104a:	43 c0       	rjmp	.+134    	; 0x10d2 <GPIO_setupPinDirection+0xc0>
    104c:	2c 81       	ldd	r18, Y+4	; 0x04
    104e:	3d 81       	ldd	r19, Y+5	; 0x05
    1050:	22 30       	cpi	r18, 0x02	; 2
    1052:	31 05       	cpc	r19, r1
    1054:	2c f4       	brge	.+10     	; 0x1060 <GPIO_setupPinDirection+0x4e>
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	9d 81       	ldd	r25, Y+5	; 0x05
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	71 f0       	breq	.+28     	; 0x107a <GPIO_setupPinDirection+0x68>
    105e:	bc c0       	rjmp	.+376    	; 0x11d8 <GPIO_setupPinDirection+0x1c6>
    1060:	2c 81       	ldd	r18, Y+4	; 0x04
    1062:	3d 81       	ldd	r19, Y+5	; 0x05
    1064:	22 30       	cpi	r18, 0x02	; 2
    1066:	31 05       	cpc	r19, r1
    1068:	09 f4       	brne	.+2      	; 0x106c <GPIO_setupPinDirection+0x5a>
    106a:	5f c0       	rjmp	.+190    	; 0x112a <GPIO_setupPinDirection+0x118>
    106c:	8c 81       	ldd	r24, Y+4	; 0x04
    106e:	9d 81       	ldd	r25, Y+5	; 0x05
    1070:	83 30       	cpi	r24, 0x03	; 3
    1072:	91 05       	cpc	r25, r1
    1074:	09 f4       	brne	.+2      	; 0x1078 <GPIO_setupPinDirection+0x66>
    1076:	85 c0       	rjmp	.+266    	; 0x1182 <GPIO_setupPinDirection+0x170>
    1078:	af c0       	rjmp	.+350    	; 0x11d8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	a1 f4       	brne	.+40     	; 0x10a8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1080:	aa e3       	ldi	r26, 0x3A	; 58
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	ea e3       	ldi	r30, 0x3A	; 58
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	48 2f       	mov	r20, r24
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 2e       	mov	r0, r18
    1098:	02 c0       	rjmp	.+4      	; 0x109e <GPIO_setupPinDirection+0x8c>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	0a 94       	dec	r0
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <GPIO_setupPinDirection+0x88>
    10a2:	84 2b       	or	r24, r20
    10a4:	8c 93       	st	X, r24
    10a6:	98 c0       	rjmp	.+304    	; 0x11d8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    10a8:	aa e3       	ldi	r26, 0x3A	; 58
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	ea e3       	ldi	r30, 0x3A	; 58
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 2e       	mov	r0, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <GPIO_setupPinDirection+0xb4>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <GPIO_setupPinDirection+0xb0>
    10ca:	80 95       	com	r24
    10cc:	84 23       	and	r24, r20
    10ce:	8c 93       	st	X, r24
    10d0:	83 c0       	rjmp	.+262    	; 0x11d8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	a1 f4       	brne	.+40     	; 0x1100 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    10d8:	a7 e3       	ldi	r26, 0x37	; 55
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e7 e3       	ldi	r30, 0x37	; 55
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 2e       	mov	r0, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <GPIO_setupPinDirection+0xe4>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	0a 94       	dec	r0
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <GPIO_setupPinDirection+0xe0>
    10fa:	84 2b       	or	r24, r20
    10fc:	8c 93       	st	X, r24
    10fe:	6c c0       	rjmp	.+216    	; 0x11d8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1100:	a7 e3       	ldi	r26, 0x37	; 55
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e7 e3       	ldi	r30, 0x37	; 55
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <GPIO_setupPinDirection+0x10c>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <GPIO_setupPinDirection+0x108>
    1122:	80 95       	com	r24
    1124:	84 23       	and	r24, r20
    1126:	8c 93       	st	X, r24
    1128:	57 c0       	rjmp	.+174    	; 0x11d8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	81 30       	cpi	r24, 0x01	; 1
    112e:	a1 f4       	brne	.+40     	; 0x1158 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1130:	a4 e3       	ldi	r26, 0x34	; 52
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e4 e3       	ldi	r30, 0x34	; 52
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <GPIO_setupPinDirection+0x13c>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <GPIO_setupPinDirection+0x138>
    1152:	84 2b       	or	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	40 c0       	rjmp	.+128    	; 0x11d8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1158:	a4 e3       	ldi	r26, 0x34	; 52
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e4 e3       	ldi	r30, 0x34	; 52
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <GPIO_setupPinDirection+0x164>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <GPIO_setupPinDirection+0x160>
    117a:	80 95       	com	r24
    117c:	84 23       	and	r24, r20
    117e:	8c 93       	st	X, r24
    1180:	2b c0       	rjmp	.+86     	; 0x11d8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	a1 f4       	brne	.+40     	; 0x11b0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1188:	a1 e3       	ldi	r26, 0x31	; 49
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e1 e3       	ldi	r30, 0x31	; 49
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <GPIO_setupPinDirection+0x194>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <GPIO_setupPinDirection+0x190>
    11aa:	84 2b       	or	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	14 c0       	rjmp	.+40     	; 0x11d8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    11b0:	a1 e3       	ldi	r26, 0x31	; 49
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e1 e3       	ldi	r30, 0x31	; 49
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <GPIO_setupPinDirection+0x1bc>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <GPIO_setupPinDirection+0x1b8>
    11d2:	80 95       	com	r24
    11d4:	84 23       	and	r24, r20
    11d6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <GPIO_writePin+0x6>
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <GPIO_writePin+0x8>
    11f0:	0f 92       	push	r0
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	89 83       	std	Y+1, r24	; 0x01
    11f8:	6a 83       	std	Y+2, r22	; 0x02
    11fa:	4b 83       	std	Y+3, r20	; 0x03
	if (port_num > NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT)
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	85 30       	cpi	r24, 0x05	; 5
    1200:	08 f0       	brcs	.+2      	; 0x1204 <GPIO_writePin+0x1c>
    1202:	d5 c0       	rjmp	.+426    	; 0x13ae <GPIO_writePin+0x1c6>
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	89 30       	cpi	r24, 0x09	; 9
    1208:	08 f0       	brcs	.+2      	; 0x120c <GPIO_writePin+0x24>
    120a:	d1 c0       	rjmp	.+418    	; 0x13ae <GPIO_writePin+0x1c6>
		/* Do nothing */
	}
	else
	{
		/* Write pin value as wanted */
		switch (port_num)
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	3d 83       	std	Y+5, r19	; 0x05
    1214:	2c 83       	std	Y+4, r18	; 0x04
    1216:	8c 81       	ldd	r24, Y+4	; 0x04
    1218:	9d 81       	ldd	r25, Y+5	; 0x05
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	91 05       	cpc	r25, r1
    121e:	09 f4       	brne	.+2      	; 0x1222 <GPIO_writePin+0x3a>
    1220:	43 c0       	rjmp	.+134    	; 0x12a8 <GPIO_writePin+0xc0>
    1222:	2c 81       	ldd	r18, Y+4	; 0x04
    1224:	3d 81       	ldd	r19, Y+5	; 0x05
    1226:	22 30       	cpi	r18, 0x02	; 2
    1228:	31 05       	cpc	r19, r1
    122a:	2c f4       	brge	.+10     	; 0x1236 <GPIO_writePin+0x4e>
    122c:	8c 81       	ldd	r24, Y+4	; 0x04
    122e:	9d 81       	ldd	r25, Y+5	; 0x05
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	71 f0       	breq	.+28     	; 0x1250 <GPIO_writePin+0x68>
    1234:	bc c0       	rjmp	.+376    	; 0x13ae <GPIO_writePin+0x1c6>
    1236:	2c 81       	ldd	r18, Y+4	; 0x04
    1238:	3d 81       	ldd	r19, Y+5	; 0x05
    123a:	22 30       	cpi	r18, 0x02	; 2
    123c:	31 05       	cpc	r19, r1
    123e:	09 f4       	brne	.+2      	; 0x1242 <GPIO_writePin+0x5a>
    1240:	5f c0       	rjmp	.+190    	; 0x1300 <GPIO_writePin+0x118>
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	9d 81       	ldd	r25, Y+5	; 0x05
    1246:	83 30       	cpi	r24, 0x03	; 3
    1248:	91 05       	cpc	r25, r1
    124a:	09 f4       	brne	.+2      	; 0x124e <GPIO_writePin+0x66>
    124c:	85 c0       	rjmp	.+266    	; 0x1358 <GPIO_writePin+0x170>
    124e:	af c0       	rjmp	.+350    	; 0x13ae <GPIO_writePin+0x1c6>
		{
		case PORTA_ID :
			if (value == LOGIC_HIGH)
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	a1 f4       	brne	.+40     	; 0x127e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1256:	ab e3       	ldi	r26, 0x3B	; 59
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	eb e3       	ldi	r30, 0x3B	; 59
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 2e       	mov	r0, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <GPIO_writePin+0x8c>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	0a 94       	dec	r0
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <GPIO_writePin+0x88>
    1278:	84 2b       	or	r24, r20
    127a:	8c 93       	st	X, r24
    127c:	98 c0       	rjmp	.+304    	; 0x13ae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    127e:	ab e3       	ldi	r26, 0x3B	; 59
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	eb e3       	ldi	r30, 0x3B	; 59
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <GPIO_writePin+0xb4>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <GPIO_writePin+0xb0>
    12a0:	80 95       	com	r24
    12a2:	84 23       	and	r24, r20
    12a4:	8c 93       	st	X, r24
    12a6:	83 c0       	rjmp	.+262    	; 0x13ae <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID :
			if (value == LOGIC_HIGH)
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	a1 f4       	brne	.+40     	; 0x12d6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    12ae:	a8 e3       	ldi	r26, 0x38	; 56
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e8 e3       	ldi	r30, 0x38	; 56
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	48 2f       	mov	r20, r24
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	02 2e       	mov	r0, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <GPIO_writePin+0xe4>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <GPIO_writePin+0xe0>
    12d0:	84 2b       	or	r24, r20
    12d2:	8c 93       	st	X, r24
    12d4:	6c c0       	rjmp	.+216    	; 0x13ae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    12d6:	a8 e3       	ldi	r26, 0x38	; 56
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e8 e3       	ldi	r30, 0x38	; 56
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 2e       	mov	r0, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <GPIO_writePin+0x10c>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <GPIO_writePin+0x108>
    12f8:	80 95       	com	r24
    12fa:	84 23       	and	r24, r20
    12fc:	8c 93       	st	X, r24
    12fe:	57 c0       	rjmp	.+174    	; 0x13ae <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID :
			if (value == LOGIC_HIGH)
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	a1 f4       	brne	.+40     	; 0x132e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1306:	a5 e3       	ldi	r26, 0x35	; 53
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e5 e3       	ldi	r30, 0x35	; 53
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	48 2f       	mov	r20, r24
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 2e       	mov	r0, r18
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <GPIO_writePin+0x13c>
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	0a 94       	dec	r0
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <GPIO_writePin+0x138>
    1328:	84 2b       	or	r24, r20
    132a:	8c 93       	st	X, r24
    132c:	40 c0       	rjmp	.+128    	; 0x13ae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    132e:	a5 e3       	ldi	r26, 0x35	; 53
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e5 e3       	ldi	r30, 0x35	; 53
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	48 2f       	mov	r20, r24
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	02 2e       	mov	r0, r18
    1346:	02 c0       	rjmp	.+4      	; 0x134c <GPIO_writePin+0x164>
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	0a 94       	dec	r0
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <GPIO_writePin+0x160>
    1350:	80 95       	com	r24
    1352:	84 23       	and	r24, r20
    1354:	8c 93       	st	X, r24
    1356:	2b c0       	rjmp	.+86     	; 0x13ae <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID :
			if (value == LOGIC_HIGH)
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	81 30       	cpi	r24, 0x01	; 1
    135c:	a1 f4       	brne	.+40     	; 0x1386 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    135e:	a2 e3       	ldi	r26, 0x32	; 50
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e2 e3       	ldi	r30, 0x32	; 50
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	48 2f       	mov	r20, r24
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	02 2e       	mov	r0, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <GPIO_writePin+0x194>
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	0a 94       	dec	r0
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <GPIO_writePin+0x190>
    1380:	84 2b       	or	r24, r20
    1382:	8c 93       	st	X, r24
    1384:	14 c0       	rjmp	.+40     	; 0x13ae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1386:	a2 e3       	ldi	r26, 0x32	; 50
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e2 e3       	ldi	r30, 0x32	; 50
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	48 2f       	mov	r20, r24
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 2e       	mov	r0, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <GPIO_writePin+0x1bc>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <GPIO_writePin+0x1b8>
    13a8:	80 95       	com	r24
    13aa:	84 23       	and	r24, r20
    13ac:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <GPIO_readPin+0x6>
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <GPIO_readPin+0x8>
    13c6:	0f 92       	push	r0
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	8a 83       	std	Y+2, r24	; 0x02
    13ce:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW; /* To hold the pin_value in order not to do switch cases with mulitple returns within it */
    13d0:	19 82       	std	Y+1, r1	; 0x01
	if (pin_num >= NUM_OF_PINS_PER_PORT || port_num >= NUM_OF_PORTS )
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	88 30       	cpi	r24, 0x08	; 8
    13d6:	08 f0       	brcs	.+2      	; 0x13da <GPIO_readPin+0x1c>
    13d8:	84 c0       	rjmp	.+264    	; 0x14e2 <GPIO_readPin+0x124>
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	84 30       	cpi	r24, 0x04	; 4
    13de:	08 f0       	brcs	.+2      	; 0x13e2 <GPIO_readPin+0x24>
    13e0:	80 c0       	rjmp	.+256    	; 0x14e2 <GPIO_readPin+0x124>
	{
		/* Do nothing */
	}
	else
	{
		switch (port_num)
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	3d 83       	std	Y+5, r19	; 0x05
    13ea:	2c 83       	std	Y+4, r18	; 0x04
    13ec:	4c 81       	ldd	r20, Y+4	; 0x04
    13ee:	5d 81       	ldd	r21, Y+5	; 0x05
    13f0:	41 30       	cpi	r20, 0x01	; 1
    13f2:	51 05       	cpc	r21, r1
    13f4:	79 f1       	breq	.+94     	; 0x1454 <GPIO_readPin+0x96>
    13f6:	8c 81       	ldd	r24, Y+4	; 0x04
    13f8:	9d 81       	ldd	r25, Y+5	; 0x05
    13fa:	82 30       	cpi	r24, 0x02	; 2
    13fc:	91 05       	cpc	r25, r1
    13fe:	34 f4       	brge	.+12     	; 0x140c <GPIO_readPin+0x4e>
    1400:	2c 81       	ldd	r18, Y+4	; 0x04
    1402:	3d 81       	ldd	r19, Y+5	; 0x05
    1404:	21 15       	cp	r18, r1
    1406:	31 05       	cpc	r19, r1
    1408:	69 f0       	breq	.+26     	; 0x1424 <GPIO_readPin+0x66>
    140a:	6b c0       	rjmp	.+214    	; 0x14e2 <GPIO_readPin+0x124>
    140c:	4c 81       	ldd	r20, Y+4	; 0x04
    140e:	5d 81       	ldd	r21, Y+5	; 0x05
    1410:	42 30       	cpi	r20, 0x02	; 2
    1412:	51 05       	cpc	r21, r1
    1414:	b9 f1       	breq	.+110    	; 0x1484 <GPIO_readPin+0xc6>
    1416:	8c 81       	ldd	r24, Y+4	; 0x04
    1418:	9d 81       	ldd	r25, Y+5	; 0x05
    141a:	83 30       	cpi	r24, 0x03	; 3
    141c:	91 05       	cpc	r25, r1
    141e:	09 f4       	brne	.+2      	; 0x1422 <GPIO_readPin+0x64>
    1420:	49 c0       	rjmp	.+146    	; 0x14b4 <GPIO_readPin+0xf6>
    1422:	5f c0       	rjmp	.+190    	; 0x14e2 <GPIO_readPin+0x124>
		{
		case PORTA_ID :
			if (BIT_IS_SET(PINA,pin_num)) /* Note that we read from the PIN not the PORT */
    1424:	e9 e3       	ldi	r30, 0x39	; 57
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	88 2f       	mov	r24, r24
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	a9 01       	movw	r20, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <GPIO_readPin+0x7e>
    1438:	55 95       	asr	r21
    143a:	47 95       	ror	r20
    143c:	8a 95       	dec	r24
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <GPIO_readPin+0x7a>
    1440:	ca 01       	movw	r24, r20
    1442:	81 70       	andi	r24, 0x01	; 1
    1444:	90 70       	andi	r25, 0x00	; 0
    1446:	88 23       	and	r24, r24
    1448:	19 f0       	breq	.+6      	; 0x1450 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	89 83       	std	Y+1, r24	; 0x01
    144e:	49 c0       	rjmp	.+146    	; 0x14e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1450:	19 82       	std	Y+1, r1	; 0x01
    1452:	47 c0       	rjmp	.+142    	; 0x14e2 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID :
			if (BIT_IS_SET(PINB,pin_num))
    1454:	e6 e3       	ldi	r30, 0x36	; 54
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a9 01       	movw	r20, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <GPIO_readPin+0xae>
    1468:	55 95       	asr	r21
    146a:	47 95       	ror	r20
    146c:	8a 95       	dec	r24
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <GPIO_readPin+0xaa>
    1470:	ca 01       	movw	r24, r20
    1472:	81 70       	andi	r24, 0x01	; 1
    1474:	90 70       	andi	r25, 0x00	; 0
    1476:	88 23       	and	r24, r24
    1478:	19 f0       	breq	.+6      	; 0x1480 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	31 c0       	rjmp	.+98     	; 0x14e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1480:	19 82       	std	Y+1, r1	; 0x01
    1482:	2f c0       	rjmp	.+94     	; 0x14e2 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID :
			if (BIT_IS_SET(PINC,pin_num))
    1484:	e3 e3       	ldi	r30, 0x33	; 51
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	88 2f       	mov	r24, r24
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	a9 01       	movw	r20, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <GPIO_readPin+0xde>
    1498:	55 95       	asr	r21
    149a:	47 95       	ror	r20
    149c:	8a 95       	dec	r24
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <GPIO_readPin+0xda>
    14a0:	ca 01       	movw	r24, r20
    14a2:	81 70       	andi	r24, 0x01	; 1
    14a4:	90 70       	andi	r25, 0x00	; 0
    14a6:	88 23       	and	r24, r24
    14a8:	19 f0       	breq	.+6      	; 0x14b0 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	19 c0       	rjmp	.+50     	; 0x14e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14b0:	19 82       	std	Y+1, r1	; 0x01
    14b2:	17 c0       	rjmp	.+46     	; 0x14e2 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID :
			if (BIT_IS_SET(PIND,pin_num))
    14b4:	e0 e3       	ldi	r30, 0x30	; 48
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	88 2f       	mov	r24, r24
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	a9 01       	movw	r20, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <GPIO_readPin+0x10e>
    14c8:	55 95       	asr	r21
    14ca:	47 95       	ror	r20
    14cc:	8a 95       	dec	r24
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <GPIO_readPin+0x10a>
    14d0:	ca 01       	movw	r24, r20
    14d2:	81 70       	andi	r24, 0x01	; 1
    14d4:	90 70       	andi	r25, 0x00	; 0
    14d6:	88 23       	and	r24, r24
    14d8:	19 f0       	breq	.+6      	; 0x14e0 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	01 c0       	rjmp	.+2      	; 0x14e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14e0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <GPIO_setupPortDirection+0x6>
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <GPIO_setupPortDirection+0x8>
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	84 30       	cpi	r24, 0x04	; 4
    1508:	90 f5       	brcc	.+100    	; 0x156e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	3c 83       	std	Y+4, r19	; 0x04
    1512:	2b 83       	std	Y+3, r18	; 0x03
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	91 05       	cpc	r25, r1
    151c:	d1 f0       	breq	.+52     	; 0x1552 <GPIO_setupPortDirection+0x5e>
    151e:	2b 81       	ldd	r18, Y+3	; 0x03
    1520:	3c 81       	ldd	r19, Y+4	; 0x04
    1522:	22 30       	cpi	r18, 0x02	; 2
    1524:	31 05       	cpc	r19, r1
    1526:	2c f4       	brge	.+10     	; 0x1532 <GPIO_setupPortDirection+0x3e>
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	9c 81       	ldd	r25, Y+4	; 0x04
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	61 f0       	breq	.+24     	; 0x1548 <GPIO_setupPortDirection+0x54>
    1530:	1e c0       	rjmp	.+60     	; 0x156e <GPIO_setupPortDirection+0x7a>
    1532:	2b 81       	ldd	r18, Y+3	; 0x03
    1534:	3c 81       	ldd	r19, Y+4	; 0x04
    1536:	22 30       	cpi	r18, 0x02	; 2
    1538:	31 05       	cpc	r19, r1
    153a:	81 f0       	breq	.+32     	; 0x155c <GPIO_setupPortDirection+0x68>
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	9c 81       	ldd	r25, Y+4	; 0x04
    1540:	83 30       	cpi	r24, 0x03	; 3
    1542:	91 05       	cpc	r25, r1
    1544:	81 f0       	breq	.+32     	; 0x1566 <GPIO_setupPortDirection+0x72>
    1546:	13 c0       	rjmp	.+38     	; 0x156e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1548:	ea e3       	ldi	r30, 0x3A	; 58
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	80 83       	st	Z, r24
    1550:	0e c0       	rjmp	.+28     	; 0x156e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1552:	e7 e3       	ldi	r30, 0x37	; 55
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	80 83       	st	Z, r24
    155a:	09 c0       	rjmp	.+18     	; 0x156e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    155c:	e4 e3       	ldi	r30, 0x34	; 52
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	80 83       	st	Z, r24
    1564:	04 c0       	rjmp	.+8      	; 0x156e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1566:	e1 e3       	ldi	r30, 0x31	; 49
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	80 83       	st	Z, r24
			break;
		}
	}
}
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	00 d0       	rcall	.+0      	; 0x1582 <GPIO_writePort+0x6>
    1582:	00 d0       	rcall	.+0      	; 0x1584 <GPIO_writePort+0x8>
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num >= NUM_OF_PORTS)
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	84 30       	cpi	r24, 0x04	; 4
    1590:	90 f5       	brcc	.+100    	; 0x15f6 <GPIO_writePort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch (port_num)
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	3c 83       	std	Y+4, r19	; 0x04
    159a:	2b 83       	std	Y+3, r18	; 0x03
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	91 05       	cpc	r25, r1
    15a4:	d1 f0       	breq	.+52     	; 0x15da <GPIO_writePort+0x5e>
    15a6:	2b 81       	ldd	r18, Y+3	; 0x03
    15a8:	3c 81       	ldd	r19, Y+4	; 0x04
    15aa:	22 30       	cpi	r18, 0x02	; 2
    15ac:	31 05       	cpc	r19, r1
    15ae:	2c f4       	brge	.+10     	; 0x15ba <GPIO_writePort+0x3e>
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	61 f0       	breq	.+24     	; 0x15d0 <GPIO_writePort+0x54>
    15b8:	1e c0       	rjmp	.+60     	; 0x15f6 <GPIO_writePort+0x7a>
    15ba:	2b 81       	ldd	r18, Y+3	; 0x03
    15bc:	3c 81       	ldd	r19, Y+4	; 0x04
    15be:	22 30       	cpi	r18, 0x02	; 2
    15c0:	31 05       	cpc	r19, r1
    15c2:	81 f0       	breq	.+32     	; 0x15e4 <GPIO_writePort+0x68>
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	9c 81       	ldd	r25, Y+4	; 0x04
    15c8:	83 30       	cpi	r24, 0x03	; 3
    15ca:	91 05       	cpc	r25, r1
    15cc:	81 f0       	breq	.+32     	; 0x15ee <GPIO_writePort+0x72>
    15ce:	13 c0       	rjmp	.+38     	; 0x15f6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID :
			PORTA = value;
    15d0:	eb e3       	ldi	r30, 0x3B	; 59
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	80 83       	st	Z, r24
    15d8:	0e c0       	rjmp	.+28     	; 0x15f6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID :
			PORTB = value;
    15da:	e8 e3       	ldi	r30, 0x38	; 56
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	80 83       	st	Z, r24
    15e2:	09 c0       	rjmp	.+18     	; 0x15f6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID :
			PORTC = value;
    15e4:	e5 e3       	ldi	r30, 0x35	; 53
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	80 83       	st	Z, r24
    15ec:	04 c0       	rjmp	.+8      	; 0x15f6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID :
			PORTD = value;
    15ee:	e2 e3       	ldi	r30, 0x32	; 50
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	80 83       	st	Z, r24
			break;
		}
	}
}
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret

00001604 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	00 d0       	rcall	.+0      	; 0x160a <GPIO_readPort+0x6>
    160a:	00 d0       	rcall	.+0      	; 0x160c <GPIO_readPort+0x8>
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = LOGIC_LOW;
    1612:	19 82       	std	Y+1, r1	; 0x01
	if (port_num >= NUM_OF_PORTS)
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	84 30       	cpi	r24, 0x04	; 4
    1618:	90 f5       	brcc	.+100    	; 0x167e <GPIO_readPort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch (port_num)
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	3c 83       	std	Y+4, r19	; 0x04
    1622:	2b 83       	std	Y+3, r18	; 0x03
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	9c 81       	ldd	r25, Y+4	; 0x04
    1628:	81 30       	cpi	r24, 0x01	; 1
    162a:	91 05       	cpc	r25, r1
    162c:	d1 f0       	breq	.+52     	; 0x1662 <GPIO_readPort+0x5e>
    162e:	2b 81       	ldd	r18, Y+3	; 0x03
    1630:	3c 81       	ldd	r19, Y+4	; 0x04
    1632:	22 30       	cpi	r18, 0x02	; 2
    1634:	31 05       	cpc	r19, r1
    1636:	2c f4       	brge	.+10     	; 0x1642 <GPIO_readPort+0x3e>
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	9c 81       	ldd	r25, Y+4	; 0x04
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	61 f0       	breq	.+24     	; 0x1658 <GPIO_readPort+0x54>
    1640:	1e c0       	rjmp	.+60     	; 0x167e <GPIO_readPort+0x7a>
    1642:	2b 81       	ldd	r18, Y+3	; 0x03
    1644:	3c 81       	ldd	r19, Y+4	; 0x04
    1646:	22 30       	cpi	r18, 0x02	; 2
    1648:	31 05       	cpc	r19, r1
    164a:	81 f0       	breq	.+32     	; 0x166c <GPIO_readPort+0x68>
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	9c 81       	ldd	r25, Y+4	; 0x04
    1650:	83 30       	cpi	r24, 0x03	; 3
    1652:	91 05       	cpc	r25, r1
    1654:	81 f0       	breq	.+32     	; 0x1676 <GPIO_readPort+0x72>
    1656:	13 c0       	rjmp	.+38     	; 0x167e <GPIO_readPort+0x7a>
		{
		case PORTA_ID :
			port_value = PINA;
    1658:	e9 e3       	ldi	r30, 0x39	; 57
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	0e c0       	rjmp	.+28     	; 0x167e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID :
			port_value = PINB;
    1662:	e6 e3       	ldi	r30, 0x36	; 54
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	09 c0       	rjmp	.+18     	; 0x167e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID :
			port_value = PINC;
    166c:	e3 e3       	ldi	r30, 0x33	; 51
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	04 c0       	rjmp	.+8      	; 0x167e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID :
			port_value = PIND;
    1676:	e0 e3       	ldi	r30, 0x30	; 48
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return port_value;
    167e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	08 95       	ret

0000168e <LCD_init>:
/*
 * Description:
 * Initialize the LCD
 */
void LCD_init(void)
{
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1696:	83 e0       	ldi	r24, 0x03	; 3
    1698:	60 e0       	ldi	r22, 0x00	; 0
    169a:	41 e0       	ldi	r20, 0x01	; 1
    169c:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    16a0:	83 e0       	ldi	r24, 0x03	; 3
    16a2:	61 e0       	ldi	r22, 0x01	; 1
    16a4:	41 e0       	ldi	r20, 0x01	; 1
    16a6:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    16aa:	83 e0       	ldi	r24, 0x03	; 3
    16ac:	62 e0       	ldi	r22, 0x02	; 2
    16ae:	41 e0       	ldi	r20, 0x01	; 1
    16b0:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_setupPinDirection>

	/* Specify data register as output register */
	GPIO_setupPortDirection(PORTC_ID,PORT_OUTPUT);
    16b4:	82 e0       	ldi	r24, 0x02	; 2
    16b6:	6f ef       	ldi	r22, 0xFF	; 255
    16b8:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_setupPortDirection>

	/* use 2-line LCD + 8-bit Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    16bc:	88 e3       	ldi	r24, 0x38	; 56
    16be:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <LCD_sendCommand>

	/* cursor off */
	LCD_sendCommand(LCD_CURSOR_OFF);
    16c2:	8c e0       	ldi	r24, 0x0C	; 12
    16c4:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <LCD_sendCommand>

	/* clear LCD at the beginning */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <LCD_sendCommand>

}
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	08 95       	ret

000016d4 <LCD_sendCommand>:
/*
 * Description:
 * Send the required command to LCD
 */
void LCD_sendCommand(uint8 command)
{
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	e9 97       	sbiw	r28, 0x39	; 57
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	89 af       	std	Y+57, r24	; 0x39
	/* RS = 0; Transferring instruction data  */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    16ea:	83 e0       	ldi	r24, 0x03	; 3
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	40 e0       	ldi	r20, 0x00	; 0
    16f0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_writePin>

	/* Writing on LCD */
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    16f4:	83 e0       	ldi	r24, 0x03	; 3
    16f6:	61 e0       	ldi	r22, 0x01	; 1
    16f8:	40 e0       	ldi	r20, 0x00	; 0
    16fa:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_writePin>
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	a0 e8       	ldi	r26, 0x80	; 128
    1704:	bf e3       	ldi	r27, 0x3F	; 63
    1706:	8d ab       	std	Y+53, r24	; 0x35
    1708:	9e ab       	std	Y+54, r25	; 0x36
    170a:	af ab       	std	Y+55, r26	; 0x37
    170c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170e:	6d a9       	ldd	r22, Y+53	; 0x35
    1710:	7e a9       	ldd	r23, Y+54	; 0x36
    1712:	8f a9       	ldd	r24, Y+55	; 0x37
    1714:	98 ad       	ldd	r25, Y+56	; 0x38
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	4a e7       	ldi	r20, 0x7A	; 122
    171c:	53 e4       	ldi	r21, 0x43	; 67
    171e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	89 ab       	std	Y+49, r24	; 0x31
    1728:	9a ab       	std	Y+50, r25	; 0x32
    172a:	ab ab       	std	Y+51, r26	; 0x33
    172c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    172e:	69 a9       	ldd	r22, Y+49	; 0x31
    1730:	7a a9       	ldd	r23, Y+50	; 0x32
    1732:	8b a9       	ldd	r24, Y+51	; 0x33
    1734:	9c a9       	ldd	r25, Y+52	; 0x34
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	40 e8       	ldi	r20, 0x80	; 128
    173c:	5f e3       	ldi	r21, 0x3F	; 63
    173e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1742:	88 23       	and	r24, r24
    1744:	2c f4       	brge	.+10     	; 0x1750 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	98 ab       	std	Y+48, r25	; 0x30
    174c:	8f a7       	std	Y+47, r24	; 0x2f
    174e:	3f c0       	rjmp	.+126    	; 0x17ce <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1750:	69 a9       	ldd	r22, Y+49	; 0x31
    1752:	7a a9       	ldd	r23, Y+50	; 0x32
    1754:	8b a9       	ldd	r24, Y+51	; 0x33
    1756:	9c a9       	ldd	r25, Y+52	; 0x34
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	3f ef       	ldi	r19, 0xFF	; 255
    175c:	4f e7       	ldi	r20, 0x7F	; 127
    175e:	57 e4       	ldi	r21, 0x47	; 71
    1760:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1764:	18 16       	cp	r1, r24
    1766:	4c f5       	brge	.+82     	; 0x17ba <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1768:	6d a9       	ldd	r22, Y+53	; 0x35
    176a:	7e a9       	ldd	r23, Y+54	; 0x36
    176c:	8f a9       	ldd	r24, Y+55	; 0x37
    176e:	98 ad       	ldd	r25, Y+56	; 0x38
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e2       	ldi	r20, 0x20	; 32
    1776:	51 e4       	ldi	r21, 0x41	; 65
    1778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	bc 01       	movw	r22, r24
    1782:	cd 01       	movw	r24, r26
    1784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	98 ab       	std	Y+48, r25	; 0x30
    178e:	8f a7       	std	Y+47, r24	; 0x2f
    1790:	0f c0       	rjmp	.+30     	; 0x17b0 <LCD_sendCommand+0xdc>
    1792:	89 e1       	ldi	r24, 0x19	; 25
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	9e a7       	std	Y+46, r25	; 0x2e
    1798:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    179a:	8d a5       	ldd	r24, Y+45	; 0x2d
    179c:	9e a5       	ldd	r25, Y+46	; 0x2e
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	f1 f7       	brne	.-4      	; 0x179e <LCD_sendCommand+0xca>
    17a2:	9e a7       	std	Y+46, r25	; 0x2e
    17a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17a8:	98 a9       	ldd	r25, Y+48	; 0x30
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	98 ab       	std	Y+48, r25	; 0x30
    17ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17b2:	98 a9       	ldd	r25, Y+48	; 0x30
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	69 f7       	brne	.-38     	; 0x1792 <LCD_sendCommand+0xbe>
    17b8:	14 c0       	rjmp	.+40     	; 0x17e2 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ba:	69 a9       	ldd	r22, Y+49	; 0x31
    17bc:	7a a9       	ldd	r23, Y+50	; 0x32
    17be:	8b a9       	ldd	r24, Y+51	; 0x33
    17c0:	9c a9       	ldd	r25, Y+52	; 0x34
    17c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	98 ab       	std	Y+48, r25	; 0x30
    17cc:	8f a7       	std	Y+47, r24	; 0x2f
    17ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    17d0:	98 a9       	ldd	r25, Y+48	; 0x30
    17d2:	9c a7       	std	Y+44, r25	; 0x2c
    17d4:	8b a7       	std	Y+43, r24	; 0x2b
    17d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    17d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	f1 f7       	brne	.-4      	; 0x17da <LCD_sendCommand+0x106>
    17de:	9c a7       	std	Y+44, r25	; 0x2c
    17e0:	8b a7       	std	Y+43, r24	; 0x2b

	/* Address setup time minimum as 50 ns */
	_delay_ms(1);

	/* Enable the LCD */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    17e2:	83 e0       	ldi	r24, 0x03	; 3
    17e4:	62 e0       	ldi	r22, 0x02	; 2
    17e6:	41 e0       	ldi	r20, 0x01	; 1
    17e8:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_writePin>
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	a0 e8       	ldi	r26, 0x80	; 128
    17f2:	bf e3       	ldi	r27, 0x3F	; 63
    17f4:	8f a3       	std	Y+39, r24	; 0x27
    17f6:	98 a7       	std	Y+40, r25	; 0x28
    17f8:	a9 a7       	std	Y+41, r26	; 0x29
    17fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fc:	6f a1       	ldd	r22, Y+39	; 0x27
    17fe:	78 a5       	ldd	r23, Y+40	; 0x28
    1800:	89 a5       	ldd	r24, Y+41	; 0x29
    1802:	9a a5       	ldd	r25, Y+42	; 0x2a
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	4a e7       	ldi	r20, 0x7A	; 122
    180a:	53 e4       	ldi	r21, 0x43	; 67
    180c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	8b a3       	std	Y+35, r24	; 0x23
    1816:	9c a3       	std	Y+36, r25	; 0x24
    1818:	ad a3       	std	Y+37, r26	; 0x25
    181a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    181c:	6b a1       	ldd	r22, Y+35	; 0x23
    181e:	7c a1       	ldd	r23, Y+36	; 0x24
    1820:	8d a1       	ldd	r24, Y+37	; 0x25
    1822:	9e a1       	ldd	r25, Y+38	; 0x26
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	40 e8       	ldi	r20, 0x80	; 128
    182a:	5f e3       	ldi	r21, 0x3F	; 63
    182c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1830:	88 23       	and	r24, r24
    1832:	2c f4       	brge	.+10     	; 0x183e <LCD_sendCommand+0x16a>
		__ticks = 1;
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	9a a3       	std	Y+34, r25	; 0x22
    183a:	89 a3       	std	Y+33, r24	; 0x21
    183c:	3f c0       	rjmp	.+126    	; 0x18bc <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    183e:	6b a1       	ldd	r22, Y+35	; 0x23
    1840:	7c a1       	ldd	r23, Y+36	; 0x24
    1842:	8d a1       	ldd	r24, Y+37	; 0x25
    1844:	9e a1       	ldd	r25, Y+38	; 0x26
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	3f ef       	ldi	r19, 0xFF	; 255
    184a:	4f e7       	ldi	r20, 0x7F	; 127
    184c:	57 e4       	ldi	r21, 0x47	; 71
    184e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1852:	18 16       	cp	r1, r24
    1854:	4c f5       	brge	.+82     	; 0x18a8 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1856:	6f a1       	ldd	r22, Y+39	; 0x27
    1858:	78 a5       	ldd	r23, Y+40	; 0x28
    185a:	89 a5       	ldd	r24, Y+41	; 0x29
    185c:	9a a5       	ldd	r25, Y+42	; 0x2a
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e2       	ldi	r20, 0x20	; 32
    1864:	51 e4       	ldi	r21, 0x41	; 65
    1866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	bc 01       	movw	r22, r24
    1870:	cd 01       	movw	r24, r26
    1872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	9a a3       	std	Y+34, r25	; 0x22
    187c:	89 a3       	std	Y+33, r24	; 0x21
    187e:	0f c0       	rjmp	.+30     	; 0x189e <LCD_sendCommand+0x1ca>
    1880:	89 e1       	ldi	r24, 0x19	; 25
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	98 a3       	std	Y+32, r25	; 0x20
    1886:	8f 8f       	std	Y+31, r24	; 0x1f
    1888:	8f 8d       	ldd	r24, Y+31	; 0x1f
    188a:	98 a1       	ldd	r25, Y+32	; 0x20
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	f1 f7       	brne	.-4      	; 0x188c <LCD_sendCommand+0x1b8>
    1890:	98 a3       	std	Y+32, r25	; 0x20
    1892:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1894:	89 a1       	ldd	r24, Y+33	; 0x21
    1896:	9a a1       	ldd	r25, Y+34	; 0x22
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	9a a3       	std	Y+34, r25	; 0x22
    189c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189e:	89 a1       	ldd	r24, Y+33	; 0x21
    18a0:	9a a1       	ldd	r25, Y+34	; 0x22
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	69 f7       	brne	.-38     	; 0x1880 <LCD_sendCommand+0x1ac>
    18a6:	14 c0       	rjmp	.+40     	; 0x18d0 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a8:	6b a1       	ldd	r22, Y+35	; 0x23
    18aa:	7c a1       	ldd	r23, Y+36	; 0x24
    18ac:	8d a1       	ldd	r24, Y+37	; 0x25
    18ae:	9e a1       	ldd	r25, Y+38	; 0x26
    18b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	9a a3       	std	Y+34, r25	; 0x22
    18ba:	89 a3       	std	Y+33, r24	; 0x21
    18bc:	89 a1       	ldd	r24, Y+33	; 0x21
    18be:	9a a1       	ldd	r25, Y+34	; 0x22
    18c0:	9e 8f       	std	Y+30, r25	; 0x1e
    18c2:	8d 8f       	std	Y+29, r24	; 0x1d
    18c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	f1 f7       	brne	.-4      	; 0x18c8 <LCD_sendCommand+0x1f4>
    18cc:	9e 8f       	std	Y+30, r25	; 0x1e
    18ce:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Enable high level width - Data set-up time = 290 - 100 = 190 ns minimum*/
	_delay_ms(1);

	/* Send command */
	GPIO_writePort(LCD_DATA_PORT_ID,command);
    18d0:	82 e0       	ldi	r24, 0x02	; 2
    18d2:	69 ad       	ldd	r22, Y+57	; 0x39
    18d4:	0e 94 be 0a 	call	0x157c	; 0x157c <GPIO_writePort>
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	a0 e8       	ldi	r26, 0x80	; 128
    18de:	bf e3       	ldi	r27, 0x3F	; 63
    18e0:	89 8f       	std	Y+25, r24	; 0x19
    18e2:	9a 8f       	std	Y+26, r25	; 0x1a
    18e4:	ab 8f       	std	Y+27, r26	; 0x1b
    18e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e8:	69 8d       	ldd	r22, Y+25	; 0x19
    18ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	4a e7       	ldi	r20, 0x7A	; 122
    18f6:	53 e4       	ldi	r21, 0x43	; 67
    18f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	8d 8b       	std	Y+21, r24	; 0x15
    1902:	9e 8b       	std	Y+22, r25	; 0x16
    1904:	af 8b       	std	Y+23, r26	; 0x17
    1906:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1908:	6d 89       	ldd	r22, Y+21	; 0x15
    190a:	7e 89       	ldd	r23, Y+22	; 0x16
    190c:	8f 89       	ldd	r24, Y+23	; 0x17
    190e:	98 8d       	ldd	r25, Y+24	; 0x18
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e8       	ldi	r20, 0x80	; 128
    1916:	5f e3       	ldi	r21, 0x3F	; 63
    1918:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    191c:	88 23       	and	r24, r24
    191e:	2c f4       	brge	.+10     	; 0x192a <LCD_sendCommand+0x256>
		__ticks = 1;
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	9c 8b       	std	Y+20, r25	; 0x14
    1926:	8b 8b       	std	Y+19, r24	; 0x13
    1928:	3f c0       	rjmp	.+126    	; 0x19a8 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    192a:	6d 89       	ldd	r22, Y+21	; 0x15
    192c:	7e 89       	ldd	r23, Y+22	; 0x16
    192e:	8f 89       	ldd	r24, Y+23	; 0x17
    1930:	98 8d       	ldd	r25, Y+24	; 0x18
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	3f ef       	ldi	r19, 0xFF	; 255
    1936:	4f e7       	ldi	r20, 0x7F	; 127
    1938:	57 e4       	ldi	r21, 0x47	; 71
    193a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    193e:	18 16       	cp	r1, r24
    1940:	4c f5       	brge	.+82     	; 0x1994 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1942:	69 8d       	ldd	r22, Y+25	; 0x19
    1944:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1946:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1948:	9c 8d       	ldd	r25, Y+28	; 0x1c
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e2       	ldi	r20, 0x20	; 32
    1950:	51 e4       	ldi	r21, 0x41	; 65
    1952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	bc 01       	movw	r22, r24
    195c:	cd 01       	movw	r24, r26
    195e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	9c 8b       	std	Y+20, r25	; 0x14
    1968:	8b 8b       	std	Y+19, r24	; 0x13
    196a:	0f c0       	rjmp	.+30     	; 0x198a <LCD_sendCommand+0x2b6>
    196c:	89 e1       	ldi	r24, 0x19	; 25
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	9a 8b       	std	Y+18, r25	; 0x12
    1972:	89 8b       	std	Y+17, r24	; 0x11
    1974:	89 89       	ldd	r24, Y+17	; 0x11
    1976:	9a 89       	ldd	r25, Y+18	; 0x12
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	f1 f7       	brne	.-4      	; 0x1978 <LCD_sendCommand+0x2a4>
    197c:	9a 8b       	std	Y+18, r25	; 0x12
    197e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1980:	8b 89       	ldd	r24, Y+19	; 0x13
    1982:	9c 89       	ldd	r25, Y+20	; 0x14
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	9c 8b       	std	Y+20, r25	; 0x14
    1988:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198a:	8b 89       	ldd	r24, Y+19	; 0x13
    198c:	9c 89       	ldd	r25, Y+20	; 0x14
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	69 f7       	brne	.-38     	; 0x196c <LCD_sendCommand+0x298>
    1992:	14 c0       	rjmp	.+40     	; 0x19bc <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1994:	6d 89       	ldd	r22, Y+21	; 0x15
    1996:	7e 89       	ldd	r23, Y+22	; 0x16
    1998:	8f 89       	ldd	r24, Y+23	; 0x17
    199a:	98 8d       	ldd	r25, Y+24	; 0x18
    199c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	9c 8b       	std	Y+20, r25	; 0x14
    19a6:	8b 8b       	std	Y+19, r24	; 0x13
    19a8:	8b 89       	ldd	r24, Y+19	; 0x13
    19aa:	9c 89       	ldd	r25, Y+20	; 0x14
    19ac:	98 8b       	std	Y+16, r25	; 0x10
    19ae:	8f 87       	std	Y+15, r24	; 0x0f
    19b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b2:	98 89       	ldd	r25, Y+16	; 0x10
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	f1 f7       	brne	.-4      	; 0x19b4 <LCD_sendCommand+0x2e0>
    19b8:	98 8b       	std	Y+16, r25	; 0x10
    19ba:	8f 87       	std	Y+15, r24	; 0x0f

	/* Data set-up time = 100 ns minimum */
	_delay_ms(1);

	/* Disable the lCD */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    19bc:	83 e0       	ldi	r24, 0x03	; 3
    19be:	62 e0       	ldi	r22, 0x02	; 2
    19c0:	40 e0       	ldi	r20, 0x00	; 0
    19c2:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_writePin>
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	a0 e8       	ldi	r26, 0x80	; 128
    19cc:	bf e3       	ldi	r27, 0x3F	; 63
    19ce:	8b 87       	std	Y+11, r24	; 0x0b
    19d0:	9c 87       	std	Y+12, r25	; 0x0c
    19d2:	ad 87       	std	Y+13, r26	; 0x0d
    19d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19da:	8d 85       	ldd	r24, Y+13	; 0x0d
    19dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	4a e7       	ldi	r20, 0x7A	; 122
    19e4:	53 e4       	ldi	r21, 0x43	; 67
    19e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	8f 83       	std	Y+7, r24	; 0x07
    19f0:	98 87       	std	Y+8, r25	; 0x08
    19f2:	a9 87       	std	Y+9, r26	; 0x09
    19f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19f6:	6f 81       	ldd	r22, Y+7	; 0x07
    19f8:	78 85       	ldd	r23, Y+8	; 0x08
    19fa:	89 85       	ldd	r24, Y+9	; 0x09
    19fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	40 e8       	ldi	r20, 0x80	; 128
    1a04:	5f e3       	ldi	r21, 0x3F	; 63
    1a06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a0a:	88 23       	and	r24, r24
    1a0c:	2c f4       	brge	.+10     	; 0x1a18 <LCD_sendCommand+0x344>
		__ticks = 1;
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	9e 83       	std	Y+6, r25	; 0x06
    1a14:	8d 83       	std	Y+5, r24	; 0x05
    1a16:	3f c0       	rjmp	.+126    	; 0x1a96 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1a18:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1a:	78 85       	ldd	r23, Y+8	; 0x08
    1a1c:	89 85       	ldd	r24, Y+9	; 0x09
    1a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	3f ef       	ldi	r19, 0xFF	; 255
    1a24:	4f e7       	ldi	r20, 0x7F	; 127
    1a26:	57 e4       	ldi	r21, 0x47	; 71
    1a28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a2c:	18 16       	cp	r1, r24
    1a2e:	4c f5       	brge	.+82     	; 0x1a82 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	40 e2       	ldi	r20, 0x20	; 32
    1a3e:	51 e4       	ldi	r21, 0x41	; 65
    1a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	bc 01       	movw	r22, r24
    1a4a:	cd 01       	movw	r24, r26
    1a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	9e 83       	std	Y+6, r25	; 0x06
    1a56:	8d 83       	std	Y+5, r24	; 0x05
    1a58:	0f c0       	rjmp	.+30     	; 0x1a78 <LCD_sendCommand+0x3a4>
    1a5a:	89 e1       	ldi	r24, 0x19	; 25
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	9c 83       	std	Y+4, r25	; 0x04
    1a60:	8b 83       	std	Y+3, r24	; 0x03
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	9c 81       	ldd	r25, Y+4	; 0x04
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	f1 f7       	brne	.-4      	; 0x1a66 <LCD_sendCommand+0x392>
    1a6a:	9c 83       	std	Y+4, r25	; 0x04
    1a6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a70:	9e 81       	ldd	r25, Y+6	; 0x06
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	9e 83       	std	Y+6, r25	; 0x06
    1a76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a78:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7c:	00 97       	sbiw	r24, 0x00	; 0
    1a7e:	69 f7       	brne	.-38     	; 0x1a5a <LCD_sendCommand+0x386>
    1a80:	14 c0       	rjmp	.+40     	; 0x1aaa <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a82:	6f 81       	ldd	r22, Y+7	; 0x07
    1a84:	78 85       	ldd	r23, Y+8	; 0x08
    1a86:	89 85       	ldd	r24, Y+9	; 0x09
    1a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	9e 83       	std	Y+6, r25	; 0x06
    1a94:	8d 83       	std	Y+5, r24	; 0x05
    1a96:	8d 81       	ldd	r24, Y+5	; 0x05
    1a98:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9a:	9a 83       	std	Y+2, r25	; 0x02
    1a9c:	89 83       	std	Y+1, r24	; 0x01
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	f1 f7       	brne	.-4      	; 0x1aa2 <LCD_sendCommand+0x3ce>
    1aa6:	9a 83       	std	Y+2, r25	; 0x02
    1aa8:	89 83       	std	Y+1, r24	; 0x01

	/* Data hold time = 13 ns minimum */
	_delay_ms(1);

}
    1aaa:	e9 96       	adiw	r28, 0x39	; 57
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <LCD_displayCharacter>:
 * Same function as the send command, except the register select
 * @Send command -> Rs = 0 as we send an instruction
 * @Display char -> Rs = 1 as we send data to display
 */
void LCD_displayCharacter(uint8 data)
{
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	e9 97       	sbiw	r28, 0x39	; 57
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	89 af       	std	Y+57, r24	; 0x39
	/* RS = 1; Transferring display data */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    1ad2:	83 e0       	ldi	r24, 0x03	; 3
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	41 e0       	ldi	r20, 0x01	; 1
    1ad8:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_writePin>

	/* Writing on LCD */
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    1adc:	83 e0       	ldi	r24, 0x03	; 3
    1ade:	61 e0       	ldi	r22, 0x01	; 1
    1ae0:	40 e0       	ldi	r20, 0x00	; 0
    1ae2:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_writePin>
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	a0 e8       	ldi	r26, 0x80	; 128
    1aec:	bf e3       	ldi	r27, 0x3F	; 63
    1aee:	8d ab       	std	Y+53, r24	; 0x35
    1af0:	9e ab       	std	Y+54, r25	; 0x36
    1af2:	af ab       	std	Y+55, r26	; 0x37
    1af4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af6:	6d a9       	ldd	r22, Y+53	; 0x35
    1af8:	7e a9       	ldd	r23, Y+54	; 0x36
    1afa:	8f a9       	ldd	r24, Y+55	; 0x37
    1afc:	98 ad       	ldd	r25, Y+56	; 0x38
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	4a e7       	ldi	r20, 0x7A	; 122
    1b04:	53 e4       	ldi	r21, 0x43	; 67
    1b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	89 ab       	std	Y+49, r24	; 0x31
    1b10:	9a ab       	std	Y+50, r25	; 0x32
    1b12:	ab ab       	std	Y+51, r26	; 0x33
    1b14:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b16:	69 a9       	ldd	r22, Y+49	; 0x31
    1b18:	7a a9       	ldd	r23, Y+50	; 0x32
    1b1a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b1c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	40 e8       	ldi	r20, 0x80	; 128
    1b24:	5f e3       	ldi	r21, 0x3F	; 63
    1b26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b2a:	88 23       	and	r24, r24
    1b2c:	2c f4       	brge	.+10     	; 0x1b38 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	98 ab       	std	Y+48, r25	; 0x30
    1b34:	8f a7       	std	Y+47, r24	; 0x2f
    1b36:	3f c0       	rjmp	.+126    	; 0x1bb6 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1b38:	69 a9       	ldd	r22, Y+49	; 0x31
    1b3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	3f ef       	ldi	r19, 0xFF	; 255
    1b44:	4f e7       	ldi	r20, 0x7F	; 127
    1b46:	57 e4       	ldi	r21, 0x47	; 71
    1b48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b4c:	18 16       	cp	r1, r24
    1b4e:	4c f5       	brge	.+82     	; 0x1ba2 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b50:	6d a9       	ldd	r22, Y+53	; 0x35
    1b52:	7e a9       	ldd	r23, Y+54	; 0x36
    1b54:	8f a9       	ldd	r24, Y+55	; 0x37
    1b56:	98 ad       	ldd	r25, Y+56	; 0x38
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e2       	ldi	r20, 0x20	; 32
    1b5e:	51 e4       	ldi	r21, 0x41	; 65
    1b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	bc 01       	movw	r22, r24
    1b6a:	cd 01       	movw	r24, r26
    1b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	98 ab       	std	Y+48, r25	; 0x30
    1b76:	8f a7       	std	Y+47, r24	; 0x2f
    1b78:	0f c0       	rjmp	.+30     	; 0x1b98 <LCD_displayCharacter+0xdc>
    1b7a:	89 e1       	ldi	r24, 0x19	; 25
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	9e a7       	std	Y+46, r25	; 0x2e
    1b80:	8d a7       	std	Y+45, r24	; 0x2d
    1b82:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b84:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <LCD_displayCharacter+0xca>
    1b8a:	9e a7       	std	Y+46, r25	; 0x2e
    1b8c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b90:	98 a9       	ldd	r25, Y+48	; 0x30
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	98 ab       	std	Y+48, r25	; 0x30
    1b96:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b98:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b9a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	69 f7       	brne	.-38     	; 0x1b7a <LCD_displayCharacter+0xbe>
    1ba0:	14 c0       	rjmp	.+40     	; 0x1bca <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ba4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ba6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ba8:	9c a9       	ldd	r25, Y+52	; 0x34
    1baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	98 ab       	std	Y+48, r25	; 0x30
    1bb4:	8f a7       	std	Y+47, r24	; 0x2f
    1bb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bb8:	98 a9       	ldd	r25, Y+48	; 0x30
    1bba:	9c a7       	std	Y+44, r25	; 0x2c
    1bbc:	8b a7       	std	Y+43, r24	; 0x2b
    1bbe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bc0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <LCD_displayCharacter+0x106>
    1bc6:	9c a7       	std	Y+44, r25	; 0x2c
    1bc8:	8b a7       	std	Y+43, r24	; 0x2b

	/* Address setup time minimum as 50 ns */
	_delay_ms(1);

	/* Enable the LCD */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    1bca:	83 e0       	ldi	r24, 0x03	; 3
    1bcc:	62 e0       	ldi	r22, 0x02	; 2
    1bce:	41 e0       	ldi	r20, 0x01	; 1
    1bd0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_writePin>
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	a0 e8       	ldi	r26, 0x80	; 128
    1bda:	bf e3       	ldi	r27, 0x3F	; 63
    1bdc:	8f a3       	std	Y+39, r24	; 0x27
    1bde:	98 a7       	std	Y+40, r25	; 0x28
    1be0:	a9 a7       	std	Y+41, r26	; 0x29
    1be2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be4:	6f a1       	ldd	r22, Y+39	; 0x27
    1be6:	78 a5       	ldd	r23, Y+40	; 0x28
    1be8:	89 a5       	ldd	r24, Y+41	; 0x29
    1bea:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	4a e7       	ldi	r20, 0x7A	; 122
    1bf2:	53 e4       	ldi	r21, 0x43	; 67
    1bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	8b a3       	std	Y+35, r24	; 0x23
    1bfe:	9c a3       	std	Y+36, r25	; 0x24
    1c00:	ad a3       	std	Y+37, r26	; 0x25
    1c02:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c04:	6b a1       	ldd	r22, Y+35	; 0x23
    1c06:	7c a1       	ldd	r23, Y+36	; 0x24
    1c08:	8d a1       	ldd	r24, Y+37	; 0x25
    1c0a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e8       	ldi	r20, 0x80	; 128
    1c12:	5f e3       	ldi	r21, 0x3F	; 63
    1c14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c18:	88 23       	and	r24, r24
    1c1a:	2c f4       	brge	.+10     	; 0x1c26 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	9a a3       	std	Y+34, r25	; 0x22
    1c22:	89 a3       	std	Y+33, r24	; 0x21
    1c24:	3f c0       	rjmp	.+126    	; 0x1ca4 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1c26:	6b a1       	ldd	r22, Y+35	; 0x23
    1c28:	7c a1       	ldd	r23, Y+36	; 0x24
    1c2a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c2c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	3f ef       	ldi	r19, 0xFF	; 255
    1c32:	4f e7       	ldi	r20, 0x7F	; 127
    1c34:	57 e4       	ldi	r21, 0x47	; 71
    1c36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c3a:	18 16       	cp	r1, r24
    1c3c:	4c f5       	brge	.+82     	; 0x1c90 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3e:	6f a1       	ldd	r22, Y+39	; 0x27
    1c40:	78 a5       	ldd	r23, Y+40	; 0x28
    1c42:	89 a5       	ldd	r24, Y+41	; 0x29
    1c44:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e2       	ldi	r20, 0x20	; 32
    1c4c:	51 e4       	ldi	r21, 0x41	; 65
    1c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	bc 01       	movw	r22, r24
    1c58:	cd 01       	movw	r24, r26
    1c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	9a a3       	std	Y+34, r25	; 0x22
    1c64:	89 a3       	std	Y+33, r24	; 0x21
    1c66:	0f c0       	rjmp	.+30     	; 0x1c86 <LCD_displayCharacter+0x1ca>
    1c68:	89 e1       	ldi	r24, 0x19	; 25
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	98 a3       	std	Y+32, r25	; 0x20
    1c6e:	8f 8f       	std	Y+31, r24	; 0x1f
    1c70:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c72:	98 a1       	ldd	r25, Y+32	; 0x20
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	f1 f7       	brne	.-4      	; 0x1c74 <LCD_displayCharacter+0x1b8>
    1c78:	98 a3       	std	Y+32, r25	; 0x20
    1c7a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c7e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	9a a3       	std	Y+34, r25	; 0x22
    1c84:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c86:	89 a1       	ldd	r24, Y+33	; 0x21
    1c88:	9a a1       	ldd	r25, Y+34	; 0x22
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	69 f7       	brne	.-38     	; 0x1c68 <LCD_displayCharacter+0x1ac>
    1c8e:	14 c0       	rjmp	.+40     	; 0x1cb8 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c90:	6b a1       	ldd	r22, Y+35	; 0x23
    1c92:	7c a1       	ldd	r23, Y+36	; 0x24
    1c94:	8d a1       	ldd	r24, Y+37	; 0x25
    1c96:	9e a1       	ldd	r25, Y+38	; 0x26
    1c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	9a a3       	std	Y+34, r25	; 0x22
    1ca2:	89 a3       	std	Y+33, r24	; 0x21
    1ca4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca8:	9e 8f       	std	Y+30, r25	; 0x1e
    1caa:	8d 8f       	std	Y+29, r24	; 0x1d
    1cac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <LCD_displayCharacter+0x1f4>
    1cb4:	9e 8f       	std	Y+30, r25	; 0x1e
    1cb6:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Enable high level width - Data set-up time = 290 - 100 = 190 ns minimum*/
	_delay_ms(1);

	/* Send command */
	GPIO_writePort(LCD_DATA_PORT_ID,data);
    1cb8:	82 e0       	ldi	r24, 0x02	; 2
    1cba:	69 ad       	ldd	r22, Y+57	; 0x39
    1cbc:	0e 94 be 0a 	call	0x157c	; 0x157c <GPIO_writePort>
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	a0 e8       	ldi	r26, 0x80	; 128
    1cc6:	bf e3       	ldi	r27, 0x3F	; 63
    1cc8:	89 8f       	std	Y+25, r24	; 0x19
    1cca:	9a 8f       	std	Y+26, r25	; 0x1a
    1ccc:	ab 8f       	std	Y+27, r26	; 0x1b
    1cce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd0:	69 8d       	ldd	r22, Y+25	; 0x19
    1cd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	4a e7       	ldi	r20, 0x7A	; 122
    1cde:	53 e4       	ldi	r21, 0x43	; 67
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	8d 8b       	std	Y+21, r24	; 0x15
    1cea:	9e 8b       	std	Y+22, r25	; 0x16
    1cec:	af 8b       	std	Y+23, r26	; 0x17
    1cee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cf0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	40 e8       	ldi	r20, 0x80	; 128
    1cfe:	5f e3       	ldi	r21, 0x3F	; 63
    1d00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d04:	88 23       	and	r24, r24
    1d06:	2c f4       	brge	.+10     	; 0x1d12 <LCD_displayCharacter+0x256>
		__ticks = 1;
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	9c 8b       	std	Y+20, r25	; 0x14
    1d0e:	8b 8b       	std	Y+19, r24	; 0x13
    1d10:	3f c0       	rjmp	.+126    	; 0x1d90 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1d12:	6d 89       	ldd	r22, Y+21	; 0x15
    1d14:	7e 89       	ldd	r23, Y+22	; 0x16
    1d16:	8f 89       	ldd	r24, Y+23	; 0x17
    1d18:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	3f ef       	ldi	r19, 0xFF	; 255
    1d1e:	4f e7       	ldi	r20, 0x7F	; 127
    1d20:	57 e4       	ldi	r21, 0x47	; 71
    1d22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d26:	18 16       	cp	r1, r24
    1d28:	4c f5       	brge	.+82     	; 0x1d7c <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e2       	ldi	r20, 0x20	; 32
    1d38:	51 e4       	ldi	r21, 0x41	; 65
    1d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	bc 01       	movw	r22, r24
    1d44:	cd 01       	movw	r24, r26
    1d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	9c 8b       	std	Y+20, r25	; 0x14
    1d50:	8b 8b       	std	Y+19, r24	; 0x13
    1d52:	0f c0       	rjmp	.+30     	; 0x1d72 <LCD_displayCharacter+0x2b6>
    1d54:	89 e1       	ldi	r24, 0x19	; 25
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	9a 8b       	std	Y+18, r25	; 0x12
    1d5a:	89 8b       	std	Y+17, r24	; 0x11
    1d5c:	89 89       	ldd	r24, Y+17	; 0x11
    1d5e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <LCD_displayCharacter+0x2a4>
    1d64:	9a 8b       	std	Y+18, r25	; 0x12
    1d66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d68:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	9c 8b       	std	Y+20, r25	; 0x14
    1d70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d72:	8b 89       	ldd	r24, Y+19	; 0x13
    1d74:	9c 89       	ldd	r25, Y+20	; 0x14
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	69 f7       	brne	.-38     	; 0x1d54 <LCD_displayCharacter+0x298>
    1d7a:	14 c0       	rjmp	.+40     	; 0x1da4 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d80:	8f 89       	ldd	r24, Y+23	; 0x17
    1d82:	98 8d       	ldd	r25, Y+24	; 0x18
    1d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	9c 8b       	std	Y+20, r25	; 0x14
    1d8e:	8b 8b       	std	Y+19, r24	; 0x13
    1d90:	8b 89       	ldd	r24, Y+19	; 0x13
    1d92:	9c 89       	ldd	r25, Y+20	; 0x14
    1d94:	98 8b       	std	Y+16, r25	; 0x10
    1d96:	8f 87       	std	Y+15, r24	; 0x0f
    1d98:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d9a:	98 89       	ldd	r25, Y+16	; 0x10
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	f1 f7       	brne	.-4      	; 0x1d9c <LCD_displayCharacter+0x2e0>
    1da0:	98 8b       	std	Y+16, r25	; 0x10
    1da2:	8f 87       	std	Y+15, r24	; 0x0f

	/* Data set-up time = 100 ns minimum */
	_delay_ms(1);

	/* Disable the lCD */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    1da4:	83 e0       	ldi	r24, 0x03	; 3
    1da6:	62 e0       	ldi	r22, 0x02	; 2
    1da8:	40 e0       	ldi	r20, 0x00	; 0
    1daa:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_writePin>
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	a0 e8       	ldi	r26, 0x80	; 128
    1db4:	bf e3       	ldi	r27, 0x3F	; 63
    1db6:	8b 87       	std	Y+11, r24	; 0x0b
    1db8:	9c 87       	std	Y+12, r25	; 0x0c
    1dba:	ad 87       	std	Y+13, r26	; 0x0d
    1dbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	4a e7       	ldi	r20, 0x7A	; 122
    1dcc:	53 e4       	ldi	r21, 0x43	; 67
    1dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	8f 83       	std	Y+7, r24	; 0x07
    1dd8:	98 87       	std	Y+8, r25	; 0x08
    1dda:	a9 87       	std	Y+9, r26	; 0x09
    1ddc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dde:	6f 81       	ldd	r22, Y+7	; 0x07
    1de0:	78 85       	ldd	r23, Y+8	; 0x08
    1de2:	89 85       	ldd	r24, Y+9	; 0x09
    1de4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	40 e8       	ldi	r20, 0x80	; 128
    1dec:	5f e3       	ldi	r21, 0x3F	; 63
    1dee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1df2:	88 23       	and	r24, r24
    1df4:	2c f4       	brge	.+10     	; 0x1e00 <LCD_displayCharacter+0x344>
		__ticks = 1;
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	9e 83       	std	Y+6, r25	; 0x06
    1dfc:	8d 83       	std	Y+5, r24	; 0x05
    1dfe:	3f c0       	rjmp	.+126    	; 0x1e7e <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1e00:	6f 81       	ldd	r22, Y+7	; 0x07
    1e02:	78 85       	ldd	r23, Y+8	; 0x08
    1e04:	89 85       	ldd	r24, Y+9	; 0x09
    1e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	3f ef       	ldi	r19, 0xFF	; 255
    1e0c:	4f e7       	ldi	r20, 0x7F	; 127
    1e0e:	57 e4       	ldi	r21, 0x47	; 71
    1e10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e14:	18 16       	cp	r1, r24
    1e16:	4c f5       	brge	.+82     	; 0x1e6a <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	40 e2       	ldi	r20, 0x20	; 32
    1e26:	51 e4       	ldi	r21, 0x41	; 65
    1e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	bc 01       	movw	r22, r24
    1e32:	cd 01       	movw	r24, r26
    1e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	9e 83       	std	Y+6, r25	; 0x06
    1e3e:	8d 83       	std	Y+5, r24	; 0x05
    1e40:	0f c0       	rjmp	.+30     	; 0x1e60 <LCD_displayCharacter+0x3a4>
    1e42:	89 e1       	ldi	r24, 0x19	; 25
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	9c 83       	std	Y+4, r25	; 0x04
    1e48:	8b 83       	std	Y+3, r24	; 0x03
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <LCD_displayCharacter+0x392>
    1e52:	9c 83       	std	Y+4, r25	; 0x04
    1e54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e56:	8d 81       	ldd	r24, Y+5	; 0x05
    1e58:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	9e 83       	std	Y+6, r25	; 0x06
    1e5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e60:	8d 81       	ldd	r24, Y+5	; 0x05
    1e62:	9e 81       	ldd	r25, Y+6	; 0x06
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	69 f7       	brne	.-38     	; 0x1e42 <LCD_displayCharacter+0x386>
    1e68:	14 c0       	rjmp	.+40     	; 0x1e92 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6c:	78 85       	ldd	r23, Y+8	; 0x08
    1e6e:	89 85       	ldd	r24, Y+9	; 0x09
    1e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	9e 83       	std	Y+6, r25	; 0x06
    1e7c:	8d 83       	std	Y+5, r24	; 0x05
    1e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e80:	9e 81       	ldd	r25, Y+6	; 0x06
    1e82:	9a 83       	std	Y+2, r25	; 0x02
    1e84:	89 83       	std	Y+1, r24	; 0x01
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <LCD_displayCharacter+0x3ce>
    1e8e:	9a 83       	std	Y+2, r25	; 0x02
    1e90:	89 83       	std	Y+1, r24	; 0x01

	/* Data hold time = 13 ns minimum */
	_delay_ms(1);

}
    1e92:	e9 96       	adiw	r28, 0x39	; 57
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	de bf       	out	0x3e, r29	; 62
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	cd bf       	out	0x3d, r28	; 61
    1e9e:	cf 91       	pop	r28
    1ea0:	df 91       	pop	r29
    1ea2:	08 95       	ret

00001ea4 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char* str)
{
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <LCD_displayString+0x6>
    1eaa:	0f 92       	push	r0
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	9b 83       	std	Y+3, r25	; 0x03
    1eb2:	8a 83       	std	Y+2, r24	; 0x02
	/* Counter for the array of characters */
	uint8 i =0;
    1eb4:	19 82       	std	Y+1, r1	; 0x01
    1eb6:	0e c0       	rjmp	.+28     	; 0x1ed4 <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	28 2f       	mov	r18, r24
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	e2 0f       	add	r30, r18
    1ec6:	f3 1f       	adc	r31, r19
    1ec8:	80 81       	ld	r24, Z
    1eca:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <LCD_displayCharacter>
		i++;
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	8f 5f       	subi	r24, 0xFF	; 255
    1ed2:	89 83       	std	Y+1, r24	; 0x01
 */
void LCD_displayString(const char* str)
{
	/* Counter for the array of characters */
	uint8 i =0;
	while (str[i] != '\0')
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	8a 81       	ldd	r24, Y+2	; 0x02
    1edc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ede:	fc 01       	movw	r30, r24
    1ee0:	e2 0f       	add	r30, r18
    1ee2:	f3 1f       	adc	r31, r19
    1ee4:	80 81       	ld	r24, Z
    1ee6:	88 23       	and	r24, r24
    1ee8:	39 f7       	brne	.-50     	; 0x1eb8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <LCD_moveCursor+0x6>
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <LCD_moveCursor+0x8>
    1efe:	0f 92       	push	r0
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	8a 83       	std	Y+2, r24	; 0x02
    1f06:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Address of the cursor depends on the row */
	switch (row) {
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	3d 83       	std	Y+5, r19	; 0x05
    1f10:	2c 83       	std	Y+4, r18	; 0x04
    1f12:	8c 81       	ldd	r24, Y+4	; 0x04
    1f14:	9d 81       	ldd	r25, Y+5	; 0x05
    1f16:	81 30       	cpi	r24, 0x01	; 1
    1f18:	91 05       	cpc	r25, r1
    1f1a:	c1 f0       	breq	.+48     	; 0x1f4c <LCD_moveCursor+0x56>
    1f1c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f1e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f20:	22 30       	cpi	r18, 0x02	; 2
    1f22:	31 05       	cpc	r19, r1
    1f24:	2c f4       	brge	.+10     	; 0x1f30 <LCD_moveCursor+0x3a>
    1f26:	8c 81       	ldd	r24, Y+4	; 0x04
    1f28:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	61 f0       	breq	.+24     	; 0x1f46 <LCD_moveCursor+0x50>
    1f2e:	19 c0       	rjmp	.+50     	; 0x1f62 <LCD_moveCursor+0x6c>
    1f30:	2c 81       	ldd	r18, Y+4	; 0x04
    1f32:	3d 81       	ldd	r19, Y+5	; 0x05
    1f34:	22 30       	cpi	r18, 0x02	; 2
    1f36:	31 05       	cpc	r19, r1
    1f38:	69 f0       	breq	.+26     	; 0x1f54 <LCD_moveCursor+0x5e>
    1f3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f3e:	83 30       	cpi	r24, 0x03	; 3
    1f40:	91 05       	cpc	r25, r1
    1f42:	61 f0       	breq	.+24     	; 0x1f5c <LCD_moveCursor+0x66>
    1f44:	0e c0       	rjmp	.+28     	; 0x1f62 <LCD_moveCursor+0x6c>
	case 0 : /* First line */
		lcd_memory_address = LCD_FIRST_LINE_START_ID + col ;
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	89 83       	std	Y+1, r24	; 0x01
    1f4a:	0b c0       	rjmp	.+22     	; 0x1f62 <LCD_moveCursor+0x6c>
		break;
	case 1 : /* Second line */
		lcd_memory_address = LCD_SECOND_LINE_START_ID + col;
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	80 5c       	subi	r24, 0xC0	; 192
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	07 c0       	rjmp	.+14     	; 0x1f62 <LCD_moveCursor+0x6c>
		break;
	case 2 : /* Third line */
		lcd_memory_address = LCD_THIRD_LINE_START_ID + col;
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	80 5f       	subi	r24, 0xF0	; 240
    1f58:	89 83       	std	Y+1, r24	; 0x01
    1f5a:	03 c0       	rjmp	.+6      	; 0x1f62 <LCD_moveCursor+0x6c>
		break;
	case 3 : /* Fourth line */
		lcd_memory_address = LCD_FOURTH_LINE_START_ID + col;
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	80 5b       	subi	r24, 0xB0	; 176
    1f60:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	80 68       	ori	r24, 0x80	; 128
    1f66:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <LCD_sendCommand>

}
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *str)
{
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	00 d0       	rcall	.+0      	; 0x1f80 <LCD_displayStringRowColumn+0x6>
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <LCD_displayStringRowColumn+0x8>
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	89 83       	std	Y+1, r24	; 0x01
    1f88:	6a 83       	std	Y+2, r22	; 0x02
    1f8a:	5c 83       	std	Y+4, r21	; 0x04
    1f8c:	4b 83       	std	Y+3, r20	; 0x03
	/* Move cursor to the desired position */
	LCD_moveCursor(row, col);
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	6a 81       	ldd	r22, Y+2	; 0x02
    1f92:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <LCD_moveCursor>

	/* Start printing the string from that position */
	LCD_displayString(str);
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9a:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <LCD_displayString>
}
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	62 97       	sbiw	r28, 0x12	; 18
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	9a 8b       	std	Y+18, r25	; 0x12
    1fc2:	89 8b       	std	Y+17, r24	; 0x11
	/* String to hold the ascii result*/
	char buffer[16]; /* The maximum size of characters in one line in screenis 16 */

	/* Use itoa (integer to ascii) C function to convert the data to its corresponding ASCII value, included in stdlib header file*/
	itoa(data,buffer,10);  /*10 is the base for decimal*/
    1fc4:	89 89       	ldd	r24, Y+17	; 0x11
    1fc6:	9a 89       	ldd	r25, Y+18	; 0x12
    1fc8:	9e 01       	movw	r18, r28
    1fca:	2f 5f       	subi	r18, 0xFF	; 255
    1fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fce:	b9 01       	movw	r22, r18
    1fd0:	4a e0       	ldi	r20, 0x0A	; 10
    1fd2:	50 e0       	ldi	r21, 0x00	; 0
    1fd4:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <itoa>
	/* data transfers its content to buffer with base 10 */

	LCD_displayString(buffer); /* Display the string */
    1fd8:	ce 01       	movw	r24, r28
    1fda:	01 96       	adiw	r24, 0x01	; 1
    1fdc:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <LCD_displayString>

}
    1fe0:	62 96       	adiw	r28, 0x12	; 18
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	de bf       	out	0x3e, r29	; 62
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	cd bf       	out	0x3d, r28	; 61
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
	/* Send clear display command */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <LCD_sendCommand>
}
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	08 95       	ret

00002006 <LM35_getTemperature>:

#include "lm35_sensor.h"
#include "lcd.h"

uint8 LM35_getTemperature(void)
{
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	00 d0       	rcall	.+0      	; 0x200c <LM35_getTemperature+0x6>
    200c:	0f 92       	push	r0
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
	uint16 adc_value = 0; /* To return the 10 bits of ADC */
    2012:	1b 82       	std	Y+3, r1	; 0x03
    2014:	1a 82       	std	Y+2, r1	; 0x02

	uint8 temp_value = 0; /* Temperature varies from 0 to 150 C so 8 bits are enough */
    2016:	19 82       	std	Y+1, r1	; 0x01

	adc_value = ADC_readChannel(LM35_SENSOR_CHANNEL_ID);
    2018:	82 e0       	ldi	r24, 0x02	; 2
    201a:	0e 94 4a 07 	call	0xe94	; 0xe94 <ADC_readChannel>
    201e:	9b 83       	std	Y+3, r25	; 0x03
    2020:	8a 83       	std	Y+2, r24	; 0x02
	/* Calculate the temperature from the ADC value
	 * uint32 is to cast the numerator as it will be huge. "That's what she said"
	 * uint8 to cast the numerator after being divide by the denumerator.
	 * After division the number will fit in 8 bits only as the temperature varies from 0 to 150 C.
	 */
	temp_value = (uint8)(((uint32)adc_value*LM35_SENSOR_MAX_TEMP*ADC_MAX_OPERATING_VOLTAGE)/(LM35_SENSOR_MAX_OPERATING_VOLTAGE*ADC_MAX_DECIMAL_VALUE));
    2022:	8a 81       	ldd	r24, Y+2	; 0x02
    2024:	9b 81       	ldd	r25, Y+3	; 0x03
    2026:	cc 01       	movw	r24, r24
    2028:	a0 e0       	ldi	r26, 0x00	; 0
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	26 e9       	ldi	r18, 0x96	; 150
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e0       	ldi	r20, 0x00	; 0
    2032:	50 e0       	ldi	r21, 0x00	; 0
    2034:	bc 01       	movw	r22, r24
    2036:	cd 01       	movw	r24, r26
    2038:	0e 94 67 15 	call	0x2ace	; 0x2ace <__mulsi3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	bc 01       	movw	r22, r24
    2042:	cd 01       	movw	r24, r26
    2044:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	bc 01       	movw	r22, r24
    204e:	cd 01       	movw	r24, r26
    2050:	2a e0       	ldi	r18, 0x0A	; 10
    2052:	37 ed       	ldi	r19, 0xD7	; 215
    2054:	43 e2       	ldi	r20, 0x23	; 35
    2056:	50 e4       	ldi	r21, 0x40	; 64
    2058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	bc 01       	movw	r22, r24
    2062:	cd 01       	movw	r24, r26
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 ed       	ldi	r19, 0xD0	; 208
    2068:	4f eb       	ldi	r20, 0xBF	; 191
    206a:	54 e4       	ldi	r21, 0x44	; 68
    206c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	bc 01       	movw	r22, r24
    2076:	cd 01       	movw	r24, r26
    2078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	89 83       	std	Y+1, r24	; 0x01

	return temp_value;
    2082:	89 81       	ldd	r24, Y+1	; 0x01

}
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <LM35_displayTemperature>:

void LM35_displayTemperature (uint8 temperature)
{
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	0f 92       	push	r0
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	89 83       	std	Y+1, r24	; 0x01
	if(temperature >= 100)
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	84 36       	cpi	r24, 0x64	; 100
    20a0:	30 f0       	brcs	.+12     	; 0x20ae <LM35_displayTemperature+0x1e>
			{
				LCD_intgerToString(temperature);
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	88 2f       	mov	r24, r24
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <LCD_intgerToString>
    20ac:	08 c0       	rjmp	.+16     	; 0x20be <LM35_displayTemperature+0x2e>
			}
			else
			{
				LCD_intgerToString(temperature);
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	88 2f       	mov	r24, r24
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <LCD_intgerToString>
				/* In case the digital value is two or one digits print space in the next digit place */
				LCD_displayCharacter(' ');
    20b8:	80 e2       	ldi	r24, 0x20	; 32
    20ba:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <LCD_displayCharacter>
			}
}
    20be:	0f 90       	pop	r0
    20c0:	cf 91       	pop	r28
    20c2:	df 91       	pop	r29
    20c4:	08 95       	ret

000020c6 <DCMOTOR_init>:

#include "motor.h"
#include "pwm_timer.h" /* To control the speed of fan */

void DCMOTOR_init(void)
{
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
	/* Setup the motor pins as output */
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID,DC_MOTOR_FIRST_PIN_ID,PIN_OUTPUT);
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	60 e0       	ldi	r22, 0x00	; 0
    20d2:	41 e0       	ldi	r20, 0x01	; 1
    20d4:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID,DC_MOTOR_SECOND_PIN_ID,PIN_OUTPUT);
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	61 e0       	ldi	r22, 0x01	; 1
    20dc:	41 e0       	ldi	r20, 0x01	; 1
    20de:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_setupPinDirection>

	/* Stop the motor at the beginning */
	GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_FIRST_PIN_ID,LOGIC_LOW);
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	60 e0       	ldi	r22, 0x00	; 0
    20e6:	40 e0       	ldi	r20, 0x00	; 0
    20e8:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_SECOND_PIN_ID,LOGIC_LOW);
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	61 e0       	ldi	r22, 0x01	; 1
    20f0:	40 e0       	ldi	r20, 0x00	; 0
    20f2:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_writePin>
}
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	08 95       	ret

000020fc <DCMotor_Rotate>:

void DCMotor_Rotate(DcMotor_State state,uint8 speed)
{
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    2104:	67 97       	sbiw	r28, 0x17	; 23
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	f8 94       	cli
    210a:	de bf       	out	0x3e, r29	; 62
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	cd bf       	out	0x3d, r28	; 61
    2110:	8f 87       	std	Y+15, r24	; 0x0f
    2112:	68 8b       	std	Y+16, r22	; 0x10
	 * 25600 fit in uint16 (65535)
	 * Duty_cycle --> Speed
	 * 255 --> 100 (max)
	 * ?? --> Speed
	 */
	uint16 fan_duty_cycle = speed*255/100;
    2114:	88 89       	ldd	r24, Y+16	; 0x10
    2116:	48 2f       	mov	r20, r24
    2118:	50 e0       	ldi	r21, 0x00	; 0
    211a:	ca 01       	movw	r24, r20
    211c:	9c 01       	movw	r18, r24
    211e:	22 0f       	add	r18, r18
    2120:	33 1f       	adc	r19, r19
    2122:	c9 01       	movw	r24, r18
    2124:	96 95       	lsr	r25
    2126:	98 2f       	mov	r25, r24
    2128:	88 27       	eor	r24, r24
    212a:	97 95       	ror	r25
    212c:	87 95       	ror	r24
    212e:	82 1b       	sub	r24, r18
    2130:	93 0b       	sbc	r25, r19
    2132:	84 0f       	add	r24, r20
    2134:	95 1f       	adc	r25, r21
    2136:	24 e6       	ldi	r18, 0x64	; 100
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	b9 01       	movw	r22, r18
    213c:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <__divmodhi4>
    2140:	cb 01       	movw	r24, r22
    2142:	9a 83       	std	Y+2, r25	; 0x02
    2144:	89 83       	std	Y+1, r24	; 0x01

	/* Initialize timer and pwm driver */
	TIMER_ConfigType configuration = { TIMER1_ID,TIMER1_MODE_FAST_PWM_OCR1A,0,255,TIMER_CLOCK_CPU_64};
    2146:	9e 01       	movw	r18, r28
    2148:	2d 5f       	subi	r18, 0xFD	; 253
    214a:	3f 4f       	sbci	r19, 0xFF	; 255
    214c:	3c 8b       	std	Y+20, r19	; 0x14
    214e:	2b 8b       	std	Y+19, r18	; 0x13
    2150:	85 e8       	ldi	r24, 0x85	; 133
    2152:	91 e0       	ldi	r25, 0x01	; 1
    2154:	9e 8b       	std	Y+22, r25	; 0x16
    2156:	8d 8b       	std	Y+21, r24	; 0x15
    2158:	97 e0       	ldi	r25, 0x07	; 7
    215a:	9f 8b       	std	Y+23, r25	; 0x17
    215c:	ed 89       	ldd	r30, Y+21	; 0x15
    215e:	fe 89       	ldd	r31, Y+22	; 0x16
    2160:	00 80       	ld	r0, Z
    2162:	2d 89       	ldd	r18, Y+21	; 0x15
    2164:	3e 89       	ldd	r19, Y+22	; 0x16
    2166:	2f 5f       	subi	r18, 0xFF	; 255
    2168:	3f 4f       	sbci	r19, 0xFF	; 255
    216a:	3e 8b       	std	Y+22, r19	; 0x16
    216c:	2d 8b       	std	Y+21, r18	; 0x15
    216e:	eb 89       	ldd	r30, Y+19	; 0x13
    2170:	fc 89       	ldd	r31, Y+20	; 0x14
    2172:	00 82       	st	Z, r0
    2174:	2b 89       	ldd	r18, Y+19	; 0x13
    2176:	3c 89       	ldd	r19, Y+20	; 0x14
    2178:	2f 5f       	subi	r18, 0xFF	; 255
    217a:	3f 4f       	sbci	r19, 0xFF	; 255
    217c:	3c 8b       	std	Y+20, r19	; 0x14
    217e:	2b 8b       	std	Y+19, r18	; 0x13
    2180:	3f 89       	ldd	r19, Y+23	; 0x17
    2182:	31 50       	subi	r19, 0x01	; 1
    2184:	3f 8b       	std	Y+23, r19	; 0x17
    2186:	8f 89       	ldd	r24, Y+23	; 0x17
    2188:	88 23       	and	r24, r24
    218a:	41 f7       	brne	.-48     	; 0x215c <DCMotor_Rotate+0x60>
	TIMER_init(&configuration);
    218c:	ce 01       	movw	r24, r28
    218e:	03 96       	adiw	r24, 0x03	; 3
    2190:	0e 94 2a 13 	call	0x2654	; 0x2654 <TIMER_init>

	PWM_ConfigType configuration2 = { TIMER1_ID,PWM_MODE_NON_INVERTING,PWM_CLOCK_CPU_64,fan_duty_cycle};
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	8a 87       	std	Y+10, r24	; 0x0a
    2198:	82 e0       	ldi	r24, 0x02	; 2
    219a:	8b 87       	std	Y+11, r24	; 0x0b
    219c:	83 e0       	ldi	r24, 0x03	; 3
    219e:	8c 87       	std	Y+12, r24	; 0x0c
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	9a 81       	ldd	r25, Y+2	; 0x02
    21a4:	9e 87       	std	Y+14, r25	; 0x0e
    21a6:	8d 87       	std	Y+13, r24	; 0x0d
	PWM_Timer_start(&configuration2);
    21a8:	ce 01       	movw	r24, r28
    21aa:	0a 96       	adiw	r24, 0x0a	; 10
    21ac:	0e 94 14 11 	call	0x2228	; 0x2228 <PWM_Timer_start>

	/* Stop or rotate based on the state */
	switch(state)
    21b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b2:	e8 2f       	mov	r30, r24
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	fa 8b       	std	Y+18, r31	; 0x12
    21b8:	e9 8b       	std	Y+17, r30	; 0x11
    21ba:	29 89       	ldd	r18, Y+17	; 0x11
    21bc:	3a 89       	ldd	r19, Y+18	; 0x12
    21be:	21 30       	cpi	r18, 0x01	; 1
    21c0:	31 05       	cpc	r19, r1
    21c2:	a1 f0       	breq	.+40     	; 0x21ec <DCMotor_Rotate+0xf0>
    21c4:	89 89       	ldd	r24, Y+17	; 0x11
    21c6:	9a 89       	ldd	r25, Y+18	; 0x12
    21c8:	82 30       	cpi	r24, 0x02	; 2
    21ca:	91 05       	cpc	r25, r1
    21cc:	d1 f0       	breq	.+52     	; 0x2202 <DCMotor_Rotate+0x106>
    21ce:	e9 89       	ldd	r30, Y+17	; 0x11
    21d0:	fa 89       	ldd	r31, Y+18	; 0x12
    21d2:	30 97       	sbiw	r30, 0x00	; 0
    21d4:	01 f5       	brne	.+64     	; 0x2216 <DCMotor_Rotate+0x11a>
	{
	case DC_MOTOR_STOP :
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_FIRST_PIN_ID,LOGIC_LOW);
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	60 e0       	ldi	r22, 0x00	; 0
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_SECOND_PIN_ID,LOGIC_LOW);
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	61 e0       	ldi	r22, 0x01	; 1
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_writePin>
    21ea:	15 c0       	rjmp	.+42     	; 0x2216 <DCMotor_Rotate+0x11a>
		break;
	case DC_MOTOR_CLOCKWISE :
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_FIRST_PIN_ID,LOGIC_LOW);
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	60 e0       	ldi	r22, 0x00	; 0
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_SECOND_PIN_ID,LOGIC_HIGH);
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	61 e0       	ldi	r22, 0x01	; 1
    21fa:	41 e0       	ldi	r20, 0x01	; 1
    21fc:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_writePin>
    2200:	0a c0       	rjmp	.+20     	; 0x2216 <DCMotor_Rotate+0x11a>
		break;
	case DC_MOTOR_ANTI_CLOCKWISE :
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_FIRST_PIN_ID,LOGIC_HIGH);
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	60 e0       	ldi	r22, 0x00	; 0
    2206:	41 e0       	ldi	r20, 0x01	; 1
    2208:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_SECOND_PIN_ID,LOGIC_LOW);
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	61 e0       	ldi	r22, 0x01	; 1
    2210:	40 e0       	ldi	r20, 0x00	; 0
    2212:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_writePin>
		break;
	}
}
    2216:	67 96       	adiw	r28, 0x17	; 23
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	cd bf       	out	0x3d, r28	; 61
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <PWM_Timer_start>:
 *                    		  Functions definitions                            *
 *******************************************************************************/


void PWM_Timer_start(const PWM_ConfigType *Config_Ptr)
{
    2228:	df 93       	push	r29
    222a:	cf 93       	push	r28
    222c:	00 d0       	rcall	.+0      	; 0x222e <PWM_Timer_start+0x6>
    222e:	00 d0       	rcall	.+0      	; 0x2230 <PWM_Timer_start+0x8>
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	9a 83       	std	Y+2, r25	; 0x02
    2236:	89 83       	std	Y+1, r24	; 0x01

	switch (Config_Ptr->identification)
    2238:	e9 81       	ldd	r30, Y+1	; 0x01
    223a:	fa 81       	ldd	r31, Y+2	; 0x02
    223c:	80 81       	ld	r24, Z
    223e:	28 2f       	mov	r18, r24
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	3c 83       	std	Y+4, r19	; 0x04
    2244:	2b 83       	std	Y+3, r18	; 0x03
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	9c 81       	ldd	r25, Y+4	; 0x04
    224a:	81 30       	cpi	r24, 0x01	; 1
    224c:	91 05       	cpc	r25, r1
    224e:	c1 f1       	breq	.+112    	; 0x22c0 <PWM_Timer_start+0x98>
    2250:	2b 81       	ldd	r18, Y+3	; 0x03
    2252:	3c 81       	ldd	r19, Y+4	; 0x04
    2254:	22 30       	cpi	r18, 0x02	; 2
    2256:	31 05       	cpc	r19, r1
    2258:	09 f4       	brne	.+2      	; 0x225c <PWM_Timer_start+0x34>
    225a:	64 c0       	rjmp	.+200    	; 0x2324 <PWM_Timer_start+0xfc>
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	9c 81       	ldd	r25, Y+4	; 0x04
    2260:	00 97       	sbiw	r24, 0x00	; 0
    2262:	09 f0       	breq	.+2      	; 0x2266 <PWM_Timer_start+0x3e>
    2264:	8b c0       	rjmp	.+278    	; 0x237c <PWM_Timer_start+0x154>
	{
	case TIMER0_ID :

		/* Configure PB3/OC0 as output pin -> pin where the PWM signal is generated from MC */
		GPIO_setupPinDirection(PORTB_ID,PIN3,PIN_OUTPUT);
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	63 e0       	ldi	r22, 0x03	; 3
    226a:	41 e0       	ldi	r20, 0x01	; 1
    226c:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_setupPinDirection>

		/* Insert PWM Waveform mode
		 * &0xCF to clear COM01 (bit 5) & COM00 (bit 4)
		 * <<4 to insert them in COM01 & COM00
		 */
		TCCR0 = (TCCR0 & 0xCF) | ((Config_Ptr->mode)<<4);
    2270:	a3 e5       	ldi	r26, 0x53	; 83
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	e3 e5       	ldi	r30, 0x53	; 83
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	28 2f       	mov	r18, r24
    227c:	2f 7c       	andi	r18, 0xCF	; 207
    227e:	e9 81       	ldd	r30, Y+1	; 0x01
    2280:	fa 81       	ldd	r31, Y+2	; 0x02
    2282:	81 81       	ldd	r24, Z+1	; 0x01
    2284:	88 2f       	mov	r24, r24
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	82 95       	swap	r24
    228a:	92 95       	swap	r25
    228c:	90 7f       	andi	r25, 0xF0	; 240
    228e:	98 27       	eor	r25, r24
    2290:	80 7f       	andi	r24, 0xF0	; 240
    2292:	98 27       	eor	r25, r24
    2294:	82 2b       	or	r24, r18
    2296:	8c 93       	st	X, r24


		/* F_CPU = 8Mhz , F_PWM = 200-700 -> using F_PWM = F_CPU/N*256 -> N(pre-scaler)= 64 */
		/* F_CPU = 1Mhz , F_PWM = 200-700 -> using F_PWM = F_CPU/N*(1+TOP) -> N(pre-scaler)= 8 , You choose the top value =250 */

		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->prescaler);
    2298:	a3 e5       	ldi	r26, 0x53	; 83
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	e3 e5       	ldi	r30, 0x53	; 83
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	98 2f       	mov	r25, r24
    22a4:	98 7f       	andi	r25, 0xF8	; 248
    22a6:	e9 81       	ldd	r30, Y+1	; 0x01
    22a8:	fa 81       	ldd	r31, Y+2	; 0x02
    22aa:	82 81       	ldd	r24, Z+2	; 0x02
    22ac:	89 2b       	or	r24, r25
    22ae:	8c 93       	st	X, r24

		/* Set value for the compare */
		OCR0 = Config_Ptr->duty_cycle;
    22b0:	ac e5       	ldi	r26, 0x5C	; 92
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	e9 81       	ldd	r30, Y+1	; 0x01
    22b6:	fa 81       	ldd	r31, Y+2	; 0x02
    22b8:	83 81       	ldd	r24, Z+3	; 0x03
    22ba:	94 81       	ldd	r25, Z+4	; 0x04
    22bc:	8c 93       	st	X, r24
    22be:	5e c0       	rjmp	.+188    	; 0x237c <PWM_Timer_start+0x154>
		break;

	case TIMER1_ID :

		/* Configure PD5/OC1A as output pin -> pin where the PWM signal is generated from MC */
		GPIO_setupPinDirection(PORTD_ID,PIN5,PIN_OUTPUT);
    22c0:	83 e0       	ldi	r24, 0x03	; 3
    22c2:	65 e0       	ldi	r22, 0x05	; 5
    22c4:	41 e0       	ldi	r20, 0x01	; 1
    22c6:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_setupPinDirection>

		/* Insert PWM Waveform mode
		 * &0x3F to clear COM1A1 (bit 7) & COM1A0 (bit 6) & COM1B1 (bit 5) & COM1B0 (Bit4)
		 * <<6 to insert them in COM1A1 & COM1A0
		 */
		TCCR1A = (TCCR1A & 0x0F) | ((Config_Ptr->mode)<<6);
    22ca:	af e4       	ldi	r26, 0x4F	; 79
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	ef e4       	ldi	r30, 0x4F	; 79
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	28 2f       	mov	r18, r24
    22d6:	2f 70       	andi	r18, 0x0F	; 15
    22d8:	e9 81       	ldd	r30, Y+1	; 0x01
    22da:	fa 81       	ldd	r31, Y+2	; 0x02
    22dc:	81 81       	ldd	r24, Z+1	; 0x01
    22de:	88 2f       	mov	r24, r24
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	00 24       	eor	r0, r0
    22e4:	96 95       	lsr	r25
    22e6:	87 95       	ror	r24
    22e8:	07 94       	ror	r0
    22ea:	96 95       	lsr	r25
    22ec:	87 95       	ror	r24
    22ee:	07 94       	ror	r0
    22f0:	98 2f       	mov	r25, r24
    22f2:	80 2d       	mov	r24, r0
    22f4:	82 2b       	or	r24, r18
    22f6:	8c 93       	st	X, r24

		/* F_CPU = 8Mhz , F_PWM = 200-700 -> using F_PWM = F_CPU/N*(1+TOP) -> N(pre-scaler)= 64 , You choose the top value = 250*/
		/* F_CPU = 1Mhz , F_PWM = 200-700 -> using F_PWM = F_CPU/N*(1+TOP) -> N(pre-scaler)= 8 , You choose the top value =250 */
		TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    22f8:	ae e4       	ldi	r26, 0x4E	; 78
    22fa:	b0 e0       	ldi	r27, 0x00	; 0
    22fc:	ee e4       	ldi	r30, 0x4E	; 78
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	80 81       	ld	r24, Z
    2302:	98 2f       	mov	r25, r24
    2304:	98 7f       	andi	r25, 0xF8	; 248
    2306:	e9 81       	ldd	r30, Y+1	; 0x01
    2308:	fa 81       	ldd	r31, Y+2	; 0x02
    230a:	82 81       	ldd	r24, Z+2	; 0x02
    230c:	89 2b       	or	r24, r25
    230e:	8c 93       	st	X, r24

		/* Choose top value using TOP = (F_CPU/N*F_PWM)-1 */
		OCR1A = Config_Ptr->duty_cycle;
    2310:	aa e4       	ldi	r26, 0x4A	; 74
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	e9 81       	ldd	r30, Y+1	; 0x01
    2316:	fa 81       	ldd	r31, Y+2	; 0x02
    2318:	83 81       	ldd	r24, Z+3	; 0x03
    231a:	94 81       	ldd	r25, Z+4	; 0x04
    231c:	11 96       	adiw	r26, 0x01	; 1
    231e:	9c 93       	st	X, r25
    2320:	8e 93       	st	-X, r24
    2322:	2c c0       	rjmp	.+88     	; 0x237c <PWM_Timer_start+0x154>

		break;
	case TIMER2_ID :

		/* Configure PD7/OC2 as output pin -> pin where the PWM signal is generated from MC */
		GPIO_setupPinDirection(PORTD_ID,PIN7,PIN_OUTPUT);
    2324:	83 e0       	ldi	r24, 0x03	; 3
    2326:	67 e0       	ldi	r22, 0x07	; 7
    2328:	41 e0       	ldi	r20, 0x01	; 1
    232a:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_setupPinDirection>

		/* Insert PWM Waveform mode
		 * &0xCF to clear COM21 (bit 5) & COM20 (bit 4)
		 * <<4 to insert them in COM21 & COM20
		 */
		TCCR2 = (TCCR2 & 0xCF) | ((Config_Ptr->mode)<<4);
    232e:	a5 e4       	ldi	r26, 0x45	; 69
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	e5 e4       	ldi	r30, 0x45	; 69
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	28 2f       	mov	r18, r24
    233a:	2f 7c       	andi	r18, 0xCF	; 207
    233c:	e9 81       	ldd	r30, Y+1	; 0x01
    233e:	fa 81       	ldd	r31, Y+2	; 0x02
    2340:	81 81       	ldd	r24, Z+1	; 0x01
    2342:	88 2f       	mov	r24, r24
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	82 95       	swap	r24
    2348:	92 95       	swap	r25
    234a:	90 7f       	andi	r25, 0xF0	; 240
    234c:	98 27       	eor	r25, r24
    234e:	80 7f       	andi	r24, 0xF0	; 240
    2350:	98 27       	eor	r25, r24
    2352:	82 2b       	or	r24, r18
    2354:	8c 93       	st	X, r24

		/* F_CPU = 8Mhz , F_PWM = 200-700 -> using F_PWM = F_CPU/N*256 -> N(pre-scaler)= 64 */
		TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->prescaler);
    2356:	a5 e4       	ldi	r26, 0x45	; 69
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	e5 e4       	ldi	r30, 0x45	; 69
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	98 2f       	mov	r25, r24
    2362:	98 7f       	andi	r25, 0xF8	; 248
    2364:	e9 81       	ldd	r30, Y+1	; 0x01
    2366:	fa 81       	ldd	r31, Y+2	; 0x02
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	89 2b       	or	r24, r25
    236c:	8c 93       	st	X, r24

		/* Set value for the compare */
		OCR2 = Config_Ptr->duty_cycle;
    236e:	a3 e4       	ldi	r26, 0x43	; 67
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e9 81       	ldd	r30, Y+1	; 0x01
    2374:	fa 81       	ldd	r31, Y+2	; 0x02
    2376:	83 81       	ldd	r24, Z+3	; 0x03
    2378:	94 81       	ldd	r25, Z+4	; 0x04
    237a:	8c 93       	st	X, r24

		break;
	}
}
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	08 95       	ret

0000238a <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect)
{
    238a:	1f 92       	push	r1
    238c:	0f 92       	push	r0
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	0f 92       	push	r0
    2392:	11 24       	eor	r1, r1
    2394:	2f 93       	push	r18
    2396:	3f 93       	push	r19
    2398:	4f 93       	push	r20
    239a:	5f 93       	push	r21
    239c:	6f 93       	push	r22
    239e:	7f 93       	push	r23
    23a0:	8f 93       	push	r24
    23a2:	9f 93       	push	r25
    23a4:	af 93       	push	r26
    23a6:	bf 93       	push	r27
    23a8:	ef 93       	push	r30
    23aa:	ff 93       	push	r31
    23ac:	df 93       	push	r29
    23ae:	cf 93       	push	r28
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer0Ptr != NULL_PTR)
    23b4:	80 91 8c 01 	lds	r24, 0x018C
    23b8:	90 91 8d 01 	lds	r25, 0x018D
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	29 f0       	breq	.+10     	; 0x23ca <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer0Ptr)();
    23c0:	e0 91 8c 01 	lds	r30, 0x018C
    23c4:	f0 91 8d 01 	lds	r31, 0x018D
    23c8:	09 95       	icall
	}
}
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	ff 91       	pop	r31
    23d0:	ef 91       	pop	r30
    23d2:	bf 91       	pop	r27
    23d4:	af 91       	pop	r26
    23d6:	9f 91       	pop	r25
    23d8:	8f 91       	pop	r24
    23da:	7f 91       	pop	r23
    23dc:	6f 91       	pop	r22
    23de:	5f 91       	pop	r21
    23e0:	4f 91       	pop	r20
    23e2:	3f 91       	pop	r19
    23e4:	2f 91       	pop	r18
    23e6:	0f 90       	pop	r0
    23e8:	0f be       	out	0x3f, r0	; 63
    23ea:	0f 90       	pop	r0
    23ec:	1f 90       	pop	r1
    23ee:	18 95       	reti

000023f0 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    23f0:	1f 92       	push	r1
    23f2:	0f 92       	push	r0
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	0f 92       	push	r0
    23f8:	11 24       	eor	r1, r1
    23fa:	2f 93       	push	r18
    23fc:	3f 93       	push	r19
    23fe:	4f 93       	push	r20
    2400:	5f 93       	push	r21
    2402:	6f 93       	push	r22
    2404:	7f 93       	push	r23
    2406:	8f 93       	push	r24
    2408:	9f 93       	push	r25
    240a:	af 93       	push	r26
    240c:	bf 93       	push	r27
    240e:	ef 93       	push	r30
    2410:	ff 93       	push	r31
    2412:	df 93       	push	r29
    2414:	cf 93       	push	r28
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer0Ptr != NULL_PTR)
    241a:	80 91 8c 01 	lds	r24, 0x018C
    241e:	90 91 8d 01 	lds	r25, 0x018D
    2422:	00 97       	sbiw	r24, 0x00	; 0
    2424:	29 f0       	breq	.+10     	; 0x2430 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer0Ptr)();
    2426:	e0 91 8c 01 	lds	r30, 0x018C
    242a:	f0 91 8d 01 	lds	r31, 0x018D
    242e:	09 95       	icall
	}
}
    2430:	cf 91       	pop	r28
    2432:	df 91       	pop	r29
    2434:	ff 91       	pop	r31
    2436:	ef 91       	pop	r30
    2438:	bf 91       	pop	r27
    243a:	af 91       	pop	r26
    243c:	9f 91       	pop	r25
    243e:	8f 91       	pop	r24
    2440:	7f 91       	pop	r23
    2442:	6f 91       	pop	r22
    2444:	5f 91       	pop	r21
    2446:	4f 91       	pop	r20
    2448:	3f 91       	pop	r19
    244a:	2f 91       	pop	r18
    244c:	0f 90       	pop	r0
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	0f 90       	pop	r0
    2452:	1f 90       	pop	r1
    2454:	18 95       	reti

00002456 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    2456:	1f 92       	push	r1
    2458:	0f 92       	push	r0
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	0f 92       	push	r0
    245e:	11 24       	eor	r1, r1
    2460:	2f 93       	push	r18
    2462:	3f 93       	push	r19
    2464:	4f 93       	push	r20
    2466:	5f 93       	push	r21
    2468:	6f 93       	push	r22
    246a:	7f 93       	push	r23
    246c:	8f 93       	push	r24
    246e:	9f 93       	push	r25
    2470:	af 93       	push	r26
    2472:	bf 93       	push	r27
    2474:	ef 93       	push	r30
    2476:	ff 93       	push	r31
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer1Ptr != NULL_PTR)
    2480:	80 91 8e 01 	lds	r24, 0x018E
    2484:	90 91 8f 01 	lds	r25, 0x018F
    2488:	00 97       	sbiw	r24, 0x00	; 0
    248a:	29 f0       	breq	.+10     	; 0x2496 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer1Ptr)();
    248c:	e0 91 8e 01 	lds	r30, 0x018E
    2490:	f0 91 8f 01 	lds	r31, 0x018F
    2494:	09 95       	icall
	}
}
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	ff 91       	pop	r31
    249c:	ef 91       	pop	r30
    249e:	bf 91       	pop	r27
    24a0:	af 91       	pop	r26
    24a2:	9f 91       	pop	r25
    24a4:	8f 91       	pop	r24
    24a6:	7f 91       	pop	r23
    24a8:	6f 91       	pop	r22
    24aa:	5f 91       	pop	r21
    24ac:	4f 91       	pop	r20
    24ae:	3f 91       	pop	r19
    24b0:	2f 91       	pop	r18
    24b2:	0f 90       	pop	r0
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	0f 90       	pop	r0
    24b8:	1f 90       	pop	r1
    24ba:	18 95       	reti

000024bc <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    24bc:	1f 92       	push	r1
    24be:	0f 92       	push	r0
    24c0:	0f b6       	in	r0, 0x3f	; 63
    24c2:	0f 92       	push	r0
    24c4:	11 24       	eor	r1, r1
    24c6:	2f 93       	push	r18
    24c8:	3f 93       	push	r19
    24ca:	4f 93       	push	r20
    24cc:	5f 93       	push	r21
    24ce:	6f 93       	push	r22
    24d0:	7f 93       	push	r23
    24d2:	8f 93       	push	r24
    24d4:	9f 93       	push	r25
    24d6:	af 93       	push	r26
    24d8:	bf 93       	push	r27
    24da:	ef 93       	push	r30
    24dc:	ff 93       	push	r31
    24de:	df 93       	push	r29
    24e0:	cf 93       	push	r28
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer1Ptr != NULL_PTR)
    24e6:	80 91 8e 01 	lds	r24, 0x018E
    24ea:	90 91 8f 01 	lds	r25, 0x018F
    24ee:	00 97       	sbiw	r24, 0x00	; 0
    24f0:	29 f0       	breq	.+10     	; 0x24fc <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer1Ptr)();
    24f2:	e0 91 8e 01 	lds	r30, 0x018E
    24f6:	f0 91 8f 01 	lds	r31, 0x018F
    24fa:	09 95       	icall
	}
}
    24fc:	cf 91       	pop	r28
    24fe:	df 91       	pop	r29
    2500:	ff 91       	pop	r31
    2502:	ef 91       	pop	r30
    2504:	bf 91       	pop	r27
    2506:	af 91       	pop	r26
    2508:	9f 91       	pop	r25
    250a:	8f 91       	pop	r24
    250c:	7f 91       	pop	r23
    250e:	6f 91       	pop	r22
    2510:	5f 91       	pop	r21
    2512:	4f 91       	pop	r20
    2514:	3f 91       	pop	r19
    2516:	2f 91       	pop	r18
    2518:	0f 90       	pop	r0
    251a:	0f be       	out	0x3f, r0	; 63
    251c:	0f 90       	pop	r0
    251e:	1f 90       	pop	r1
    2520:	18 95       	reti

00002522 <__vector_7>:
ISR(TIMER1_COMPB_vect)
{
    2522:	1f 92       	push	r1
    2524:	0f 92       	push	r0
    2526:	0f b6       	in	r0, 0x3f	; 63
    2528:	0f 92       	push	r0
    252a:	11 24       	eor	r1, r1
    252c:	2f 93       	push	r18
    252e:	3f 93       	push	r19
    2530:	4f 93       	push	r20
    2532:	5f 93       	push	r21
    2534:	6f 93       	push	r22
    2536:	7f 93       	push	r23
    2538:	8f 93       	push	r24
    253a:	9f 93       	push	r25
    253c:	af 93       	push	r26
    253e:	bf 93       	push	r27
    2540:	ef 93       	push	r30
    2542:	ff 93       	push	r31
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer1Ptr != NULL_PTR)
    254c:	80 91 8e 01 	lds	r24, 0x018E
    2550:	90 91 8f 01 	lds	r25, 0x018F
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	29 f0       	breq	.+10     	; 0x2562 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer1Ptr)();
    2558:	e0 91 8e 01 	lds	r30, 0x018E
    255c:	f0 91 8f 01 	lds	r31, 0x018F
    2560:	09 95       	icall
	}
}
    2562:	cf 91       	pop	r28
    2564:	df 91       	pop	r29
    2566:	ff 91       	pop	r31
    2568:	ef 91       	pop	r30
    256a:	bf 91       	pop	r27
    256c:	af 91       	pop	r26
    256e:	9f 91       	pop	r25
    2570:	8f 91       	pop	r24
    2572:	7f 91       	pop	r23
    2574:	6f 91       	pop	r22
    2576:	5f 91       	pop	r21
    2578:	4f 91       	pop	r20
    257a:	3f 91       	pop	r19
    257c:	2f 91       	pop	r18
    257e:	0f 90       	pop	r0
    2580:	0f be       	out	0x3f, r0	; 63
    2582:	0f 90       	pop	r0
    2584:	1f 90       	pop	r1
    2586:	18 95       	reti

00002588 <__vector_4>:
ISR(TIMER2_OVF_vect)
{
    2588:	1f 92       	push	r1
    258a:	0f 92       	push	r0
    258c:	0f b6       	in	r0, 0x3f	; 63
    258e:	0f 92       	push	r0
    2590:	11 24       	eor	r1, r1
    2592:	2f 93       	push	r18
    2594:	3f 93       	push	r19
    2596:	4f 93       	push	r20
    2598:	5f 93       	push	r21
    259a:	6f 93       	push	r22
    259c:	7f 93       	push	r23
    259e:	8f 93       	push	r24
    25a0:	9f 93       	push	r25
    25a2:	af 93       	push	r26
    25a4:	bf 93       	push	r27
    25a6:	ef 93       	push	r30
    25a8:	ff 93       	push	r31
    25aa:	df 93       	push	r29
    25ac:	cf 93       	push	r28
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer2Ptr != NULL_PTR)
    25b2:	80 91 90 01 	lds	r24, 0x0190
    25b6:	90 91 91 01 	lds	r25, 0x0191
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	29 f0       	breq	.+10     	; 0x25c8 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer2Ptr)();
    25be:	e0 91 90 01 	lds	r30, 0x0190
    25c2:	f0 91 91 01 	lds	r31, 0x0191
    25c6:	09 95       	icall
	}
}
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	ff 91       	pop	r31
    25ce:	ef 91       	pop	r30
    25d0:	bf 91       	pop	r27
    25d2:	af 91       	pop	r26
    25d4:	9f 91       	pop	r25
    25d6:	8f 91       	pop	r24
    25d8:	7f 91       	pop	r23
    25da:	6f 91       	pop	r22
    25dc:	5f 91       	pop	r21
    25de:	4f 91       	pop	r20
    25e0:	3f 91       	pop	r19
    25e2:	2f 91       	pop	r18
    25e4:	0f 90       	pop	r0
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	0f 90       	pop	r0
    25ea:	1f 90       	pop	r1
    25ec:	18 95       	reti

000025ee <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    25ee:	1f 92       	push	r1
    25f0:	0f 92       	push	r0
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	0f 92       	push	r0
    25f6:	11 24       	eor	r1, r1
    25f8:	2f 93       	push	r18
    25fa:	3f 93       	push	r19
    25fc:	4f 93       	push	r20
    25fe:	5f 93       	push	r21
    2600:	6f 93       	push	r22
    2602:	7f 93       	push	r23
    2604:	8f 93       	push	r24
    2606:	9f 93       	push	r25
    2608:	af 93       	push	r26
    260a:	bf 93       	push	r27
    260c:	ef 93       	push	r30
    260e:	ff 93       	push	r31
    2610:	df 93       	push	r29
    2612:	cf 93       	push	r28
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer2Ptr != NULL_PTR)
    2618:	80 91 90 01 	lds	r24, 0x0190
    261c:	90 91 91 01 	lds	r25, 0x0191
    2620:	00 97       	sbiw	r24, 0x00	; 0
    2622:	29 f0       	breq	.+10     	; 0x262e <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer2Ptr)();
    2624:	e0 91 90 01 	lds	r30, 0x0190
    2628:	f0 91 91 01 	lds	r31, 0x0191
    262c:	09 95       	icall
	}
}
    262e:	cf 91       	pop	r28
    2630:	df 91       	pop	r29
    2632:	ff 91       	pop	r31
    2634:	ef 91       	pop	r30
    2636:	bf 91       	pop	r27
    2638:	af 91       	pop	r26
    263a:	9f 91       	pop	r25
    263c:	8f 91       	pop	r24
    263e:	7f 91       	pop	r23
    2640:	6f 91       	pop	r22
    2642:	5f 91       	pop	r21
    2644:	4f 91       	pop	r20
    2646:	3f 91       	pop	r19
    2648:	2f 91       	pop	r18
    264a:	0f 90       	pop	r0
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	0f 90       	pop	r0
    2650:	1f 90       	pop	r1
    2652:	18 95       	reti

00002654 <TIMER_init>:


void TIMER_init(const TIMER_ConfigType *Config_ptr)
{
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	2a 97       	sbiw	r28, 0x0a	; 10
    265e:	0f b6       	in	r0, 0x3f	; 63
    2660:	f8 94       	cli
    2662:	de bf       	out	0x3e, r29	; 62
    2664:	0f be       	out	0x3f, r0	; 63
    2666:	cd bf       	out	0x3d, r28	; 61
    2668:	9a 83       	std	Y+2, r25	; 0x02
    266a:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_ptr->identification)
    266c:	e9 81       	ldd	r30, Y+1	; 0x01
    266e:	fa 81       	ldd	r31, Y+2	; 0x02
    2670:	80 81       	ld	r24, Z
    2672:	28 2f       	mov	r18, r24
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	3a 87       	std	Y+10, r19	; 0x0a
    2678:	29 87       	std	Y+9, r18	; 0x09
    267a:	89 85       	ldd	r24, Y+9	; 0x09
    267c:	9a 85       	ldd	r25, Y+10	; 0x0a
    267e:	81 30       	cpi	r24, 0x01	; 1
    2680:	91 05       	cpc	r25, r1
    2682:	09 f4       	brne	.+2      	; 0x2686 <TIMER_init+0x32>
    2684:	92 c0       	rjmp	.+292    	; 0x27aa <TIMER_init+0x156>
    2686:	29 85       	ldd	r18, Y+9	; 0x09
    2688:	3a 85       	ldd	r19, Y+10	; 0x0a
    268a:	22 30       	cpi	r18, 0x02	; 2
    268c:	31 05       	cpc	r19, r1
    268e:	09 f4       	brne	.+2      	; 0x2692 <TIMER_init+0x3e>
    2690:	0b c1       	rjmp	.+534    	; 0x28a8 <TIMER_init+0x254>
    2692:	89 85       	ldd	r24, Y+9	; 0x09
    2694:	9a 85       	ldd	r25, Y+10	; 0x0a
    2696:	00 97       	sbiw	r24, 0x00	; 0
    2698:	09 f0       	breq	.+2      	; 0x269c <TIMER_init+0x48>
    269a:	8c c1       	rjmp	.+792    	; 0x29b4 <TIMER_init+0x360>
	{
	case TIMER0_ID :

		/* Load TCNT0 with initial value */
		TCNT0 = Config_ptr->initial_value;
    269c:	a2 e5       	ldi	r26, 0x52	; 82
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	e9 81       	ldd	r30, Y+1	; 0x01
    26a2:	fa 81       	ldd	r31, Y+2	; 0x02
    26a4:	82 81       	ldd	r24, Z+2	; 0x02
    26a6:	93 81       	ldd	r25, Z+3	; 0x03
    26a8:	8c 93       	st	X, r24
		/* Insert the pre-scaler bits :
		 * &0xB7 to clear WGM00 (bit 6) & WGM01 (bit3)
		 * &0x01 to get WGM00 & <<6 to insert it
		 * &0x02 to get WGM01 & <<3 to insert it
		 */
		TCCR0 = (TCCR0 & 0xB7) | ((Config_ptr->mode & 0x01)<<6) | ((Config_ptr->mode & 0x02)<<3);
    26aa:	a3 e5       	ldi	r26, 0x53	; 83
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	e3 e5       	ldi	r30, 0x53	; 83
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	28 2f       	mov	r18, r24
    26b6:	27 7b       	andi	r18, 0xB7	; 183
    26b8:	e9 81       	ldd	r30, Y+1	; 0x01
    26ba:	fa 81       	ldd	r31, Y+2	; 0x02
    26bc:	81 81       	ldd	r24, Z+1	; 0x01
    26be:	88 2f       	mov	r24, r24
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	81 70       	andi	r24, 0x01	; 1
    26c4:	90 70       	andi	r25, 0x00	; 0
    26c6:	00 24       	eor	r0, r0
    26c8:	96 95       	lsr	r25
    26ca:	87 95       	ror	r24
    26cc:	07 94       	ror	r0
    26ce:	96 95       	lsr	r25
    26d0:	87 95       	ror	r24
    26d2:	07 94       	ror	r0
    26d4:	98 2f       	mov	r25, r24
    26d6:	80 2d       	mov	r24, r0
    26d8:	28 2b       	or	r18, r24
    26da:	e9 81       	ldd	r30, Y+1	; 0x01
    26dc:	fa 81       	ldd	r31, Y+2	; 0x02
    26de:	81 81       	ldd	r24, Z+1	; 0x01
    26e0:	88 2f       	mov	r24, r24
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	82 70       	andi	r24, 0x02	; 2
    26e6:	90 70       	andi	r25, 0x00	; 0
    26e8:	88 0f       	add	r24, r24
    26ea:	99 1f       	adc	r25, r25
    26ec:	88 0f       	add	r24, r24
    26ee:	99 1f       	adc	r25, r25
    26f0:	88 0f       	add	r24, r24
    26f2:	99 1f       	adc	r25, r25
    26f4:	82 2b       	or	r24, r18
    26f6:	8c 93       	st	X, r24

		/* Insert the clock bits :
		 * &0xF8 to clear CS00 (bit 0) & CS01 (bit 1) & CS02 (bit 2)
		 */
		TCCR0 = (TCCR0 & 0xF8) | (Config_ptr->prescaler);
    26f8:	a3 e5       	ldi	r26, 0x53	; 83
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	e3 e5       	ldi	r30, 0x53	; 83
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	80 81       	ld	r24, Z
    2702:	98 2f       	mov	r25, r24
    2704:	98 7f       	andi	r25, 0xF8	; 248
    2706:	e9 81       	ldd	r30, Y+1	; 0x01
    2708:	fa 81       	ldd	r31, Y+2	; 0x02
    270a:	86 81       	ldd	r24, Z+6	; 0x06
    270c:	89 2b       	or	r24, r25
    270e:	8c 93       	st	X, r24

		switch ((Config_ptr->mode))
    2710:	e9 81       	ldd	r30, Y+1	; 0x01
    2712:	fa 81       	ldd	r31, Y+2	; 0x02
    2714:	81 81       	ldd	r24, Z+1	; 0x01
    2716:	28 2f       	mov	r18, r24
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	38 87       	std	Y+8, r19	; 0x08
    271c:	2f 83       	std	Y+7, r18	; 0x07
    271e:	8f 81       	ldd	r24, Y+7	; 0x07
    2720:	98 85       	ldd	r25, Y+8	; 0x08
    2722:	82 30       	cpi	r24, 0x02	; 2
    2724:	91 05       	cpc	r25, r1
    2726:	51 f0       	breq	.+20     	; 0x273c <TIMER_init+0xe8>
    2728:	2f 81       	ldd	r18, Y+7	; 0x07
    272a:	38 85       	ldd	r19, Y+8	; 0x08
    272c:	23 30       	cpi	r18, 0x03	; 3
    272e:	31 05       	cpc	r19, r1
    2730:	61 f1       	breq	.+88     	; 0x278a <TIMER_init+0x136>
    2732:	8f 81       	ldd	r24, Y+7	; 0x07
    2734:	98 85       	ldd	r25, Y+8	; 0x08
    2736:	00 97       	sbiw	r24, 0x00	; 0
    2738:	c1 f0       	breq	.+48     	; 0x276a <TIMER_init+0x116>
    273a:	3c c1       	rjmp	.+632    	; 0x29b4 <TIMER_init+0x360>
		{

		case TIMER02_MODE_COMPARE :
		{
			/* Load OCR0 with compare value if compare mode is on */
			OCR0 = Config_ptr->compare_value;
    273c:	ac e5       	ldi	r26, 0x5C	; 92
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	e9 81       	ldd	r30, Y+1	; 0x01
    2742:	fa 81       	ldd	r31, Y+2	; 0x02
    2744:	84 81       	ldd	r24, Z+4	; 0x04
    2746:	95 81       	ldd	r25, Z+5	; 0x05
    2748:	8c 93       	st	X, r24

			/* Clear OCIE0 & TOIE0 (bit 0 & 1) & Enable Timer0 COMPARE Interrupt (OCIE0) */
			TIMSK = (TIMSK & 0xFC) | (1<<OCIE0);
    274a:	a9 e5       	ldi	r26, 0x59	; 89
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	e9 e5       	ldi	r30, 0x59	; 89
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	8c 7f       	andi	r24, 0xFC	; 252
    2756:	82 60       	ori	r24, 0x02	; 2
    2758:	8c 93       	st	X, r24

			/* FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode */
			TCCR0 = (TCCR0 & 0x7F) | (1<<FOC0);
    275a:	a3 e5       	ldi	r26, 0x53	; 83
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	e3 e5       	ldi	r30, 0x53	; 83
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	80 81       	ld	r24, Z
    2764:	80 68       	ori	r24, 0x80	; 128
    2766:	8c 93       	st	X, r24
    2768:	25 c1       	rjmp	.+586    	; 0x29b4 <TIMER_init+0x360>
		}

		case TIMER02_MODE_NORMAL :
		{
			/* Clear OCIE0 & TOIE0 & Enable Timer0 NORMAL Interrupt (TOIE0) */
			TIMSK = (TIMSK & 0xFC) | (1<<TOIE0);
    276a:	a9 e5       	ldi	r26, 0x59	; 89
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	e9 e5       	ldi	r30, 0x59	; 89
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	8c 7f       	andi	r24, 0xFC	; 252
    2776:	81 60       	ori	r24, 0x01	; 1
    2778:	8c 93       	st	X, r24

			/* FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode */
			TCCR0 = (TCCR0 & 0x7F) | (1<<FOC0);
    277a:	a3 e5       	ldi	r26, 0x53	; 83
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e3 e5       	ldi	r30, 0x53	; 83
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	80 68       	ori	r24, 0x80	; 128
    2786:	8c 93       	st	X, r24
    2788:	15 c1       	rjmp	.+554    	; 0x29b4 <TIMER_init+0x360>
			break;
		}
		case TIMER02_MODE_FAST_PWM :
		{
			/* FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode */
			TCCR0 &= ~(1<<FOC0);
    278a:	a3 e5       	ldi	r26, 0x53	; 83
    278c:	b0 e0       	ldi	r27, 0x00	; 0
    278e:	e3 e5       	ldi	r30, 0x53	; 83
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	8f 77       	andi	r24, 0x7F	; 127
    2796:	8c 93       	st	X, r24

			/* Clear OCIE0 & TOIE0 (bit 0 & 1) & Enable Timer0 COMPARE Interrupt (OCIE0) */
			TIMSK = (TIMSK & 0xFC) | (1<<OCIE0);
    2798:	a9 e5       	ldi	r26, 0x59	; 89
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	e9 e5       	ldi	r30, 0x59	; 89
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	8c 7f       	andi	r24, 0xFC	; 252
    27a4:	82 60       	ori	r24, 0x02	; 2
    27a6:	8c 93       	st	X, r24
    27a8:	05 c1       	rjmp	.+522    	; 0x29b4 <TIMER_init+0x360>
		break;

		case TIMER1_ID :

			/* Load TCNT1 with initial value */
			TCNT1 = Config_ptr->initial_value;
    27aa:	ac e4       	ldi	r26, 0x4C	; 76
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	e9 81       	ldd	r30, Y+1	; 0x01
    27b0:	fa 81       	ldd	r31, Y+2	; 0x02
    27b2:	82 81       	ldd	r24, Z+2	; 0x02
    27b4:	93 81       	ldd	r25, Z+3	; 0x03
    27b6:	11 96       	adiw	r26, 0x01	; 1
    27b8:	9c 93       	st	X, r25
    27ba:	8e 93       	st	-X, r24

			/* Insert the mode bits in TCCR1A :
			 * &0xFC to clear WGM10 (bit 0) & WGM11 (bit1)
			 * &0x03 to get WGM10 & WGM11
			 */
			TCCR1A = (TCCR1A & 0xFC) | ( (Config_ptr->mode) & 0x03);
    27bc:	af e4       	ldi	r26, 0x4F	; 79
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	ef e4       	ldi	r30, 0x4F	; 79
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	98 2f       	mov	r25, r24
    27c8:	9c 7f       	andi	r25, 0xFC	; 252
    27ca:	e9 81       	ldd	r30, Y+1	; 0x01
    27cc:	fa 81       	ldd	r31, Y+2	; 0x02
    27ce:	81 81       	ldd	r24, Z+1	; 0x01
    27d0:	83 70       	andi	r24, 0x03	; 3
    27d2:	89 2b       	or	r24, r25
    27d4:	8c 93       	st	X, r24
			/* Insert the mode bits in TCCR1B :
			 * &0xE7 to clear WGM12 (bit 3) & WGM13 (bit4)
			 * &0x0C to get WGM12 & WGM13 bits only & neglecting the LSB 2 (WGM10 & WGM11)
			 * << 3 to insert them
			 */
			TCCR1B = (TCCR1B & 0xE7 ) | (((Config_ptr->mode)&0x0C)<<3);
    27d6:	ae e4       	ldi	r26, 0x4E	; 78
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	ee e4       	ldi	r30, 0x4E	; 78
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
    27e0:	28 2f       	mov	r18, r24
    27e2:	27 7e       	andi	r18, 0xE7	; 231
    27e4:	e9 81       	ldd	r30, Y+1	; 0x01
    27e6:	fa 81       	ldd	r31, Y+2	; 0x02
    27e8:	81 81       	ldd	r24, Z+1	; 0x01
    27ea:	88 2f       	mov	r24, r24
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	8c 70       	andi	r24, 0x0C	; 12
    27f0:	90 70       	andi	r25, 0x00	; 0
    27f2:	88 0f       	add	r24, r24
    27f4:	99 1f       	adc	r25, r25
    27f6:	88 0f       	add	r24, r24
    27f8:	99 1f       	adc	r25, r25
    27fa:	88 0f       	add	r24, r24
    27fc:	99 1f       	adc	r25, r25
    27fe:	82 2b       	or	r24, r18
    2800:	8c 93       	st	X, r24

			/* Insert the clock bits :
			 * &0xF8 to clear CS10 (bit 0) & CS11 (bit 1) & CS12 (bit 2)
			 */
			TCCR1B = (TCCR1B & 0xF8) | (Config_ptr->prescaler);
    2802:	ae e4       	ldi	r26, 0x4E	; 78
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	ee e4       	ldi	r30, 0x4E	; 78
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	98 2f       	mov	r25, r24
    280e:	98 7f       	andi	r25, 0xF8	; 248
    2810:	e9 81       	ldd	r30, Y+1	; 0x01
    2812:	fa 81       	ldd	r31, Y+2	; 0x02
    2814:	86 81       	ldd	r24, Z+6	; 0x06
    2816:	89 2b       	or	r24, r25
    2818:	8c 93       	st	X, r24

			switch ((Config_ptr->mode))
    281a:	e9 81       	ldd	r30, Y+1	; 0x01
    281c:	fa 81       	ldd	r31, Y+2	; 0x02
    281e:	81 81       	ldd	r24, Z+1	; 0x01
    2820:	28 2f       	mov	r18, r24
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	3e 83       	std	Y+6, r19	; 0x06
    2826:	2d 83       	std	Y+5, r18	; 0x05
    2828:	8d 81       	ldd	r24, Y+5	; 0x05
    282a:	9e 81       	ldd	r25, Y+6	; 0x06
    282c:	84 30       	cpi	r24, 0x04	; 4
    282e:	91 05       	cpc	r25, r1
    2830:	51 f0       	breq	.+20     	; 0x2846 <TIMER_init+0x1f2>
    2832:	2d 81       	ldd	r18, Y+5	; 0x05
    2834:	3e 81       	ldd	r19, Y+6	; 0x06
    2836:	2f 30       	cpi	r18, 0x0F	; 15
    2838:	31 05       	cpc	r19, r1
    283a:	71 f1       	breq	.+92     	; 0x2898 <TIMER_init+0x244>
    283c:	8d 81       	ldd	r24, Y+5	; 0x05
    283e:	9e 81       	ldd	r25, Y+6	; 0x06
    2840:	00 97       	sbiw	r24, 0x00	; 0
    2842:	d1 f0       	breq	.+52     	; 0x2878 <TIMER_init+0x224>
    2844:	b7 c0       	rjmp	.+366    	; 0x29b4 <TIMER_init+0x360>
			{

			case TIMER1_MODE_COMPARE_OCR1A :
			{
				/* Load OCR1A with compare value if compare mode is on */
				OCR1A = Config_ptr->compare_value;
    2846:	aa e4       	ldi	r26, 0x4A	; 74
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	e9 81       	ldd	r30, Y+1	; 0x01
    284c:	fa 81       	ldd	r31, Y+2	; 0x02
    284e:	84 81       	ldd	r24, Z+4	; 0x04
    2850:	95 81       	ldd	r25, Z+5	; 0x05
    2852:	11 96       	adiw	r26, 0x01	; 1
    2854:	9c 93       	st	X, r25
    2856:	8e 93       	st	-X, r24

				/* Clear TICIE1 & TOIE1 & OCIE1B & OCIE1A (bit 2 & 3 & 5 & 6 ) & Enable Timer1 COMPARE A match Interrupt (OCIE1A) */
				TIMSK = (TIMSK & 0xC3) | (1<<OCIE1A);
    2858:	a9 e5       	ldi	r26, 0x59	; 89
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	e9 e5       	ldi	r30, 0x59	; 89
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	83 7c       	andi	r24, 0xC3	; 195
    2864:	80 61       	ori	r24, 0x10	; 16
    2866:	8c 93       	st	X, r24

				/* FOC0 bit is only active when the WGM13:10 bits specifies a non-PWM mode */
				TCCR1A = (TCCR1A & 0xF7) | (1<<FOC1A);
    2868:	af e4       	ldi	r26, 0x4F	; 79
    286a:	b0 e0       	ldi	r27, 0x00	; 0
    286c:	ef e4       	ldi	r30, 0x4F	; 79
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	80 81       	ld	r24, Z
    2872:	88 60       	ori	r24, 0x08	; 8
    2874:	8c 93       	st	X, r24
    2876:	9e c0       	rjmp	.+316    	; 0x29b4 <TIMER_init+0x360>
			}

			case TIMER1_MODE_NORMAL :
			{
				/* Clear TICIE1 & TOIE1 & OCIE1B & OCIE1A (bit 2 & 3 & 5 & 6 ) & Enable Timer1 Normal(overflow) Interrupt (TOIE1) */
				TIMSK = (TIMSK & 0x03) | (1<<TOIE1);
    2878:	a9 e5       	ldi	r26, 0x59	; 89
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	e9 e5       	ldi	r30, 0x59	; 89
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	83 70       	andi	r24, 0x03	; 3
    2884:	84 60       	ori	r24, 0x04	; 4
    2886:	8c 93       	st	X, r24

				/* FOC0 bit is only active when the WGM13:10 bits specifies a non-PWM mode */
				TCCR1A = (TCCR0 & 0xF7) | (1<<FOC1A);
    2888:	af e4       	ldi	r26, 0x4F	; 79
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	e3 e5       	ldi	r30, 0x53	; 83
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	80 81       	ld	r24, Z
    2892:	88 60       	ori	r24, 0x08	; 8
    2894:	8c 93       	st	X, r24
    2896:	8e c0       	rjmp	.+284    	; 0x29b4 <TIMER_init+0x360>
				break;
			}
			case TIMER1_MODE_FAST_PWM_OCR1A :
			{
				/* FOC1A & FOC1B bit is only active when the WGM01:00 bits specifies a non-PWM mode */
				TCCR1A &= ~(1<<FOC1A) & ~(1<<FOC1B);
    2898:	af e4       	ldi	r26, 0x4F	; 79
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	ef e4       	ldi	r30, 0x4F	; 79
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	83 7f       	andi	r24, 0xF3	; 243
    28a4:	8c 93       	st	X, r24
    28a6:	86 c0       	rjmp	.+268    	; 0x29b4 <TIMER_init+0x360>
			break;

			case TIMER2_ID :

				/* Load TCNT0 with initial value */
				TCNT2 = Config_ptr->initial_value;
    28a8:	a4 e4       	ldi	r26, 0x44	; 68
    28aa:	b0 e0       	ldi	r27, 0x00	; 0
    28ac:	e9 81       	ldd	r30, Y+1	; 0x01
    28ae:	fa 81       	ldd	r31, Y+2	; 0x02
    28b0:	82 81       	ldd	r24, Z+2	; 0x02
    28b2:	93 81       	ldd	r25, Z+3	; 0x03
    28b4:	8c 93       	st	X, r24
				/* Insert the pre-scaler bits :
				 * &0xB7 to clear WGM20 (bit 6) & WGM21 (bit3)
				 * &0x01 to get WGM20 & <<6 to insert it
				 * &0x02 to get WGM21 & <<3 to insert it
				 */
				TCCR2 = (TCCR0 & 0xB7) | ((Config_ptr->mode & 0x01)<<6) | ((Config_ptr->mode & 0x02)<<3);
    28b6:	a5 e4       	ldi	r26, 0x45	; 69
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	e3 e5       	ldi	r30, 0x53	; 83
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	28 2f       	mov	r18, r24
    28c2:	27 7b       	andi	r18, 0xB7	; 183
    28c4:	e9 81       	ldd	r30, Y+1	; 0x01
    28c6:	fa 81       	ldd	r31, Y+2	; 0x02
    28c8:	81 81       	ldd	r24, Z+1	; 0x01
    28ca:	88 2f       	mov	r24, r24
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	81 70       	andi	r24, 0x01	; 1
    28d0:	90 70       	andi	r25, 0x00	; 0
    28d2:	00 24       	eor	r0, r0
    28d4:	96 95       	lsr	r25
    28d6:	87 95       	ror	r24
    28d8:	07 94       	ror	r0
    28da:	96 95       	lsr	r25
    28dc:	87 95       	ror	r24
    28de:	07 94       	ror	r0
    28e0:	98 2f       	mov	r25, r24
    28e2:	80 2d       	mov	r24, r0
    28e4:	28 2b       	or	r18, r24
    28e6:	e9 81       	ldd	r30, Y+1	; 0x01
    28e8:	fa 81       	ldd	r31, Y+2	; 0x02
    28ea:	81 81       	ldd	r24, Z+1	; 0x01
    28ec:	88 2f       	mov	r24, r24
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	82 70       	andi	r24, 0x02	; 2
    28f2:	90 70       	andi	r25, 0x00	; 0
    28f4:	88 0f       	add	r24, r24
    28f6:	99 1f       	adc	r25, r25
    28f8:	88 0f       	add	r24, r24
    28fa:	99 1f       	adc	r25, r25
    28fc:	88 0f       	add	r24, r24
    28fe:	99 1f       	adc	r25, r25
    2900:	82 2b       	or	r24, r18
    2902:	8c 93       	st	X, r24

				/* Insert the clock bits :
				 * &0xF8 to clear CS20 (bit 0) & CS21 (bit 1) & CS22 (bit 2)
				 */
				TCCR2 = (TCCR0 & 0xF8) | (Config_ptr->prescaler);
    2904:	a5 e4       	ldi	r26, 0x45	; 69
    2906:	b0 e0       	ldi	r27, 0x00	; 0
    2908:	e3 e5       	ldi	r30, 0x53	; 83
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	80 81       	ld	r24, Z
    290e:	98 2f       	mov	r25, r24
    2910:	98 7f       	andi	r25, 0xF8	; 248
    2912:	e9 81       	ldd	r30, Y+1	; 0x01
    2914:	fa 81       	ldd	r31, Y+2	; 0x02
    2916:	86 81       	ldd	r24, Z+6	; 0x06
    2918:	89 2b       	or	r24, r25
    291a:	8c 93       	st	X, r24

				switch ((Config_ptr->mode))
    291c:	e9 81       	ldd	r30, Y+1	; 0x01
    291e:	fa 81       	ldd	r31, Y+2	; 0x02
    2920:	81 81       	ldd	r24, Z+1	; 0x01
    2922:	28 2f       	mov	r18, r24
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	3c 83       	std	Y+4, r19	; 0x04
    2928:	2b 83       	std	Y+3, r18	; 0x03
    292a:	8b 81       	ldd	r24, Y+3	; 0x03
    292c:	9c 81       	ldd	r25, Y+4	; 0x04
    292e:	82 30       	cpi	r24, 0x02	; 2
    2930:	91 05       	cpc	r25, r1
    2932:	51 f0       	breq	.+20     	; 0x2948 <TIMER_init+0x2f4>
    2934:	2b 81       	ldd	r18, Y+3	; 0x03
    2936:	3c 81       	ldd	r19, Y+4	; 0x04
    2938:	23 30       	cpi	r18, 0x03	; 3
    293a:	31 05       	cpc	r19, r1
    293c:	61 f1       	breq	.+88     	; 0x2996 <TIMER_init+0x342>
    293e:	8b 81       	ldd	r24, Y+3	; 0x03
    2940:	9c 81       	ldd	r25, Y+4	; 0x04
    2942:	00 97       	sbiw	r24, 0x00	; 0
    2944:	c1 f0       	breq	.+48     	; 0x2976 <TIMER_init+0x322>
    2946:	36 c0       	rjmp	.+108    	; 0x29b4 <TIMER_init+0x360>
				{

				case TIMER02_MODE_COMPARE :
				{
					/* Load OCR0 with compare value if compare mode is on */
					OCR2 = Config_ptr->compare_value;
    2948:	a3 e4       	ldi	r26, 0x43	; 67
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	e9 81       	ldd	r30, Y+1	; 0x01
    294e:	fa 81       	ldd	r31, Y+2	; 0x02
    2950:	84 81       	ldd	r24, Z+4	; 0x04
    2952:	95 81       	ldd	r25, Z+5	; 0x05
    2954:	8c 93       	st	X, r24

					/* Clear OCIE0 & TOIE0 (bit 0 & 1) & Enable Timer0 COMPARE Interrupt (OCIE0) */
					TIMSK = (TIMSK & 0x3F) | (1<<OCIE2);
    2956:	a9 e5       	ldi	r26, 0x59	; 89
    2958:	b0 e0       	ldi	r27, 0x00	; 0
    295a:	e9 e5       	ldi	r30, 0x59	; 89
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	80 81       	ld	r24, Z
    2960:	8f 73       	andi	r24, 0x3F	; 63
    2962:	80 68       	ori	r24, 0x80	; 128
    2964:	8c 93       	st	X, r24

					/* FOC0 bit is only active when the WGM13:10 bits specifies a non-PWM mode */
					TCCR2 = (TCCR2 & 0x7F) | (1<<FOC2);
    2966:	a5 e4       	ldi	r26, 0x45	; 69
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	e5 e4       	ldi	r30, 0x45	; 69
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	80 81       	ld	r24, Z
    2970:	80 68       	ori	r24, 0x80	; 128
    2972:	8c 93       	st	X, r24
    2974:	1f c0       	rjmp	.+62     	; 0x29b4 <TIMER_init+0x360>
				}

				case TIMER02_MODE_NORMAL :
				{
					/* Clear OCIE2 & TOIE2 & Enable Timer2 NORMAL Interrupt (TOIE2) */
					TIMSK = (TIMSK & 0x3F) | (1<<TOIE2);
    2976:	a9 e5       	ldi	r26, 0x59	; 89
    2978:	b0 e0       	ldi	r27, 0x00	; 0
    297a:	e9 e5       	ldi	r30, 0x59	; 89
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	8f 73       	andi	r24, 0x3F	; 63
    2982:	80 64       	ori	r24, 0x40	; 64
    2984:	8c 93       	st	X, r24

					/* FOC2 bit is only active when the WGM00 bit specifies a non-PWM mode */
					TCCR2 = (TCCR2 & 0x7F) | (1<<FOC2);
    2986:	a5 e4       	ldi	r26, 0x45	; 69
    2988:	b0 e0       	ldi	r27, 0x00	; 0
    298a:	e5 e4       	ldi	r30, 0x45	; 69
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	80 81       	ld	r24, Z
    2990:	80 68       	ori	r24, 0x80	; 128
    2992:	8c 93       	st	X, r24
    2994:	0f c0       	rjmp	.+30     	; 0x29b4 <TIMER_init+0x360>
					break;
				}
				case TIMER02_MODE_FAST_PWM :
				{
					/* FOC2 bit is only active when the WGM21:20 bits specifies a non-PWM mode */
					TCCR2 &= ~(1<<FOC2);
    2996:	a5 e4       	ldi	r26, 0x45	; 69
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	e5 e4       	ldi	r30, 0x45	; 69
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	8f 77       	andi	r24, 0x7F	; 127
    29a2:	8c 93       	st	X, r24

					/* Clear OCIE0 & TOIE0 (bit 0 & 1) & Enable Timer0 COMPARE Interrupt (OCIE0) */
					TIMSK = (TIMSK & 0x3F) | (1<<OCIE2);
    29a4:	a9 e5       	ldi	r26, 0x59	; 89
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	e9 e5       	ldi	r30, 0x59	; 89
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	80 81       	ld	r24, Z
    29ae:	8f 73       	andi	r24, 0x3F	; 63
    29b0:	80 68       	ori	r24, 0x80	; 128
    29b2:	8c 93       	st	X, r24
				}

				}
				break;
	}
}
    29b4:	2a 96       	adiw	r28, 0x0a	; 10
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	cf 91       	pop	r28
    29c2:	df 91       	pop	r29
    29c4:	08 95       	ret

000029c6 <TIMER0_setCallback>:

void TIMER0_setCallback (void(*a_ptr)(void))
{
    29c6:	df 93       	push	r29
    29c8:	cf 93       	push	r28
    29ca:	00 d0       	rcall	.+0      	; 0x29cc <TIMER0_setCallback+0x6>
    29cc:	cd b7       	in	r28, 0x3d	; 61
    29ce:	de b7       	in	r29, 0x3e	; 62
    29d0:	9a 83       	std	Y+2, r25	; 0x02
    29d2:	89 83       	std	Y+1, r24	; 0x01
	g_callbackTimer0Ptr = a_ptr;
    29d4:	89 81       	ldd	r24, Y+1	; 0x01
    29d6:	9a 81       	ldd	r25, Y+2	; 0x02
    29d8:	90 93 8d 01 	sts	0x018D, r25
    29dc:	80 93 8c 01 	sts	0x018C, r24
}
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	cf 91       	pop	r28
    29e6:	df 91       	pop	r29
    29e8:	08 95       	ret

000029ea <TIMER1_setCallback>:

void TIMER1_setCallback (void(*a_ptr)(void))
{
    29ea:	df 93       	push	r29
    29ec:	cf 93       	push	r28
    29ee:	00 d0       	rcall	.+0      	; 0x29f0 <TIMER1_setCallback+0x6>
    29f0:	cd b7       	in	r28, 0x3d	; 61
    29f2:	de b7       	in	r29, 0x3e	; 62
    29f4:	9a 83       	std	Y+2, r25	; 0x02
    29f6:	89 83       	std	Y+1, r24	; 0x01
	g_callbackTimer1Ptr = a_ptr;
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	9a 81       	ldd	r25, Y+2	; 0x02
    29fc:	90 93 8f 01 	sts	0x018F, r25
    2a00:	80 93 8e 01 	sts	0x018E, r24
}
    2a04:	0f 90       	pop	r0
    2a06:	0f 90       	pop	r0
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	08 95       	ret

00002a0e <TIMER2_setCallback>:

void TIMER2_setCallback (void(*a_ptr)(void))
{
    2a0e:	df 93       	push	r29
    2a10:	cf 93       	push	r28
    2a12:	00 d0       	rcall	.+0      	; 0x2a14 <TIMER2_setCallback+0x6>
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
    2a18:	9a 83       	std	Y+2, r25	; 0x02
    2a1a:	89 83       	std	Y+1, r24	; 0x01
	g_callbackTimer2Ptr = a_ptr;
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a20:	90 93 91 01 	sts	0x0191, r25
    2a24:	80 93 90 01 	sts	0x0190, r24
}
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	cf 91       	pop	r28
    2a2e:	df 91       	pop	r29
    2a30:	08 95       	ret

00002a32 <TIMER0_DeInit>:

void TIMER0_DeInit (void)
{
    2a32:	df 93       	push	r29
    2a34:	cf 93       	push	r28
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62
	/* Clear Timer values */
	TCNT0 = 0;
    2a3a:	e2 e5       	ldi	r30, 0x52	; 82
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	10 82       	st	Z, r1
	TCCR0 = 0;
    2a40:	e3 e5       	ldi	r30, 0x53	; 83
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	10 82       	st	Z, r1
	OCR0 = 0;
    2a46:	ec e5       	ldi	r30, 0x5C	; 92
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	10 82       	st	Z, r1

	/* Disable Interrupts */
	TIMSK &= ~(1<<TOIE0) & ~(1<<OCIE0);
    2a4c:	a9 e5       	ldi	r26, 0x59	; 89
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
    2a50:	e9 e5       	ldi	r30, 0x59	; 89
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	80 81       	ld	r24, Z
    2a56:	8c 7f       	andi	r24, 0xFC	; 252
    2a58:	8c 93       	st	X, r24
}
    2a5a:	cf 91       	pop	r28
    2a5c:	df 91       	pop	r29
    2a5e:	08 95       	ret

00002a60 <TIMER1_DeInit>:
void TIMER1_DeInit (void)
{
    2a60:	df 93       	push	r29
    2a62:	cf 93       	push	r28
    2a64:	cd b7       	in	r28, 0x3d	; 61
    2a66:	de b7       	in	r29, 0x3e	; 62
	/* Clear Timer values */
	TCNT1 = 0;
    2a68:	ec e4       	ldi	r30, 0x4C	; 76
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	11 82       	std	Z+1, r1	; 0x01
    2a6e:	10 82       	st	Z, r1
	TCCR1A = 0;
    2a70:	ef e4       	ldi	r30, 0x4F	; 79
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	10 82       	st	Z, r1
	TCCR1B = 0;
    2a76:	ee e4       	ldi	r30, 0x4E	; 78
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	10 82       	st	Z, r1
	OCR1A = 0;
    2a7c:	ea e4       	ldi	r30, 0x4A	; 74
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	11 82       	std	Z+1, r1	; 0x01
    2a82:	10 82       	st	Z, r1
	OCR1B = 0;
    2a84:	e8 e4       	ldi	r30, 0x48	; 72
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	11 82       	std	Z+1, r1	; 0x01
    2a8a:	10 82       	st	Z, r1

	/* Disable Interrupts */
	TIMSK &= ~(1<<TOIE1) & ~(1<<OCIE1A) & ~(1<<OCIE1B);
    2a8c:	a9 e5       	ldi	r26, 0x59	; 89
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	e9 e5       	ldi	r30, 0x59	; 89
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	83 7e       	andi	r24, 0xE3	; 227
    2a98:	8c 93       	st	X, r24
}
    2a9a:	cf 91       	pop	r28
    2a9c:	df 91       	pop	r29
    2a9e:	08 95       	ret

00002aa0 <TIMER2_DeInit>:

void TIMER2_DeInit (void)
{
    2aa0:	df 93       	push	r29
    2aa2:	cf 93       	push	r28
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
	/* Clear Timer values */
	TCNT2 = 0;
    2aa8:	e4 e4       	ldi	r30, 0x44	; 68
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	10 82       	st	Z, r1
	TCCR2 = 0;
    2aae:	e5 e4       	ldi	r30, 0x45	; 69
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	10 82       	st	Z, r1
	OCR2 = 0;
    2ab4:	e3 e4       	ldi	r30, 0x43	; 67
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	10 82       	st	Z, r1

	/* Disable Interrupts */
	TIMSK &= ~(1<<TOIE2) & ~(1<<OCIE2);
    2aba:	a9 e5       	ldi	r26, 0x59	; 89
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	e9 e5       	ldi	r30, 0x59	; 89
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	8f 73       	andi	r24, 0x3F	; 63
    2ac6:	8c 93       	st	X, r24
}
    2ac8:	cf 91       	pop	r28
    2aca:	df 91       	pop	r29
    2acc:	08 95       	ret

00002ace <__mulsi3>:
    2ace:	62 9f       	mul	r22, r18
    2ad0:	d0 01       	movw	r26, r0
    2ad2:	73 9f       	mul	r23, r19
    2ad4:	f0 01       	movw	r30, r0
    2ad6:	82 9f       	mul	r24, r18
    2ad8:	e0 0d       	add	r30, r0
    2ada:	f1 1d       	adc	r31, r1
    2adc:	64 9f       	mul	r22, r20
    2ade:	e0 0d       	add	r30, r0
    2ae0:	f1 1d       	adc	r31, r1
    2ae2:	92 9f       	mul	r25, r18
    2ae4:	f0 0d       	add	r31, r0
    2ae6:	83 9f       	mul	r24, r19
    2ae8:	f0 0d       	add	r31, r0
    2aea:	74 9f       	mul	r23, r20
    2aec:	f0 0d       	add	r31, r0
    2aee:	65 9f       	mul	r22, r21
    2af0:	f0 0d       	add	r31, r0
    2af2:	99 27       	eor	r25, r25
    2af4:	72 9f       	mul	r23, r18
    2af6:	b0 0d       	add	r27, r0
    2af8:	e1 1d       	adc	r30, r1
    2afa:	f9 1f       	adc	r31, r25
    2afc:	63 9f       	mul	r22, r19
    2afe:	b0 0d       	add	r27, r0
    2b00:	e1 1d       	adc	r30, r1
    2b02:	f9 1f       	adc	r31, r25
    2b04:	bd 01       	movw	r22, r26
    2b06:	cf 01       	movw	r24, r30
    2b08:	11 24       	eor	r1, r1
    2b0a:	08 95       	ret

00002b0c <__divmodhi4>:
    2b0c:	97 fb       	bst	r25, 7
    2b0e:	09 2e       	mov	r0, r25
    2b10:	07 26       	eor	r0, r23
    2b12:	0a d0       	rcall	.+20     	; 0x2b28 <__divmodhi4_neg1>
    2b14:	77 fd       	sbrc	r23, 7
    2b16:	04 d0       	rcall	.+8      	; 0x2b20 <__divmodhi4_neg2>
    2b18:	0c d0       	rcall	.+24     	; 0x2b32 <__udivmodhi4>
    2b1a:	06 d0       	rcall	.+12     	; 0x2b28 <__divmodhi4_neg1>
    2b1c:	00 20       	and	r0, r0
    2b1e:	1a f4       	brpl	.+6      	; 0x2b26 <__divmodhi4_exit>

00002b20 <__divmodhi4_neg2>:
    2b20:	70 95       	com	r23
    2b22:	61 95       	neg	r22
    2b24:	7f 4f       	sbci	r23, 0xFF	; 255

00002b26 <__divmodhi4_exit>:
    2b26:	08 95       	ret

00002b28 <__divmodhi4_neg1>:
    2b28:	f6 f7       	brtc	.-4      	; 0x2b26 <__divmodhi4_exit>
    2b2a:	90 95       	com	r25
    2b2c:	81 95       	neg	r24
    2b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b30:	08 95       	ret

00002b32 <__udivmodhi4>:
    2b32:	aa 1b       	sub	r26, r26
    2b34:	bb 1b       	sub	r27, r27
    2b36:	51 e1       	ldi	r21, 0x11	; 17
    2b38:	07 c0       	rjmp	.+14     	; 0x2b48 <__udivmodhi4_ep>

00002b3a <__udivmodhi4_loop>:
    2b3a:	aa 1f       	adc	r26, r26
    2b3c:	bb 1f       	adc	r27, r27
    2b3e:	a6 17       	cp	r26, r22
    2b40:	b7 07       	cpc	r27, r23
    2b42:	10 f0       	brcs	.+4      	; 0x2b48 <__udivmodhi4_ep>
    2b44:	a6 1b       	sub	r26, r22
    2b46:	b7 0b       	sbc	r27, r23

00002b48 <__udivmodhi4_ep>:
    2b48:	88 1f       	adc	r24, r24
    2b4a:	99 1f       	adc	r25, r25
    2b4c:	5a 95       	dec	r21
    2b4e:	a9 f7       	brne	.-22     	; 0x2b3a <__udivmodhi4_loop>
    2b50:	80 95       	com	r24
    2b52:	90 95       	com	r25
    2b54:	bc 01       	movw	r22, r24
    2b56:	cd 01       	movw	r24, r26
    2b58:	08 95       	ret

00002b5a <__prologue_saves__>:
    2b5a:	2f 92       	push	r2
    2b5c:	3f 92       	push	r3
    2b5e:	4f 92       	push	r4
    2b60:	5f 92       	push	r5
    2b62:	6f 92       	push	r6
    2b64:	7f 92       	push	r7
    2b66:	8f 92       	push	r8
    2b68:	9f 92       	push	r9
    2b6a:	af 92       	push	r10
    2b6c:	bf 92       	push	r11
    2b6e:	cf 92       	push	r12
    2b70:	df 92       	push	r13
    2b72:	ef 92       	push	r14
    2b74:	ff 92       	push	r15
    2b76:	0f 93       	push	r16
    2b78:	1f 93       	push	r17
    2b7a:	cf 93       	push	r28
    2b7c:	df 93       	push	r29
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62
    2b82:	ca 1b       	sub	r28, r26
    2b84:	db 0b       	sbc	r29, r27
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	f8 94       	cli
    2b8a:	de bf       	out	0x3e, r29	; 62
    2b8c:	0f be       	out	0x3f, r0	; 63
    2b8e:	cd bf       	out	0x3d, r28	; 61
    2b90:	09 94       	ijmp

00002b92 <__epilogue_restores__>:
    2b92:	2a 88       	ldd	r2, Y+18	; 0x12
    2b94:	39 88       	ldd	r3, Y+17	; 0x11
    2b96:	48 88       	ldd	r4, Y+16	; 0x10
    2b98:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b9a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b9c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b9e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ba0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ba2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ba4:	b9 84       	ldd	r11, Y+9	; 0x09
    2ba6:	c8 84       	ldd	r12, Y+8	; 0x08
    2ba8:	df 80       	ldd	r13, Y+7	; 0x07
    2baa:	ee 80       	ldd	r14, Y+6	; 0x06
    2bac:	fd 80       	ldd	r15, Y+5	; 0x05
    2bae:	0c 81       	ldd	r16, Y+4	; 0x04
    2bb0:	1b 81       	ldd	r17, Y+3	; 0x03
    2bb2:	aa 81       	ldd	r26, Y+2	; 0x02
    2bb4:	b9 81       	ldd	r27, Y+1	; 0x01
    2bb6:	ce 0f       	add	r28, r30
    2bb8:	d1 1d       	adc	r29, r1
    2bba:	0f b6       	in	r0, 0x3f	; 63
    2bbc:	f8 94       	cli
    2bbe:	de bf       	out	0x3e, r29	; 62
    2bc0:	0f be       	out	0x3f, r0	; 63
    2bc2:	cd bf       	out	0x3d, r28	; 61
    2bc4:	ed 01       	movw	r28, r26
    2bc6:	08 95       	ret

00002bc8 <itoa>:
    2bc8:	fb 01       	movw	r30, r22
    2bca:	9f 01       	movw	r18, r30
    2bcc:	e8 94       	clt
    2bce:	42 30       	cpi	r20, 0x02	; 2
    2bd0:	c4 f0       	brlt	.+48     	; 0x2c02 <itoa+0x3a>
    2bd2:	45 32       	cpi	r20, 0x25	; 37
    2bd4:	b4 f4       	brge	.+44     	; 0x2c02 <itoa+0x3a>
    2bd6:	4a 30       	cpi	r20, 0x0A	; 10
    2bd8:	29 f4       	brne	.+10     	; 0x2be4 <itoa+0x1c>
    2bda:	97 fb       	bst	r25, 7
    2bdc:	1e f4       	brtc	.+6      	; 0x2be4 <itoa+0x1c>
    2bde:	90 95       	com	r25
    2be0:	81 95       	neg	r24
    2be2:	9f 4f       	sbci	r25, 0xFF	; 255
    2be4:	64 2f       	mov	r22, r20
    2be6:	77 27       	eor	r23, r23
    2be8:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__udivmodhi4>
    2bec:	80 5d       	subi	r24, 0xD0	; 208
    2bee:	8a 33       	cpi	r24, 0x3A	; 58
    2bf0:	0c f0       	brlt	.+2      	; 0x2bf4 <itoa+0x2c>
    2bf2:	89 5d       	subi	r24, 0xD9	; 217
    2bf4:	81 93       	st	Z+, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	a1 f7       	brne	.-24     	; 0x2be4 <itoa+0x1c>
    2bfc:	16 f4       	brtc	.+4      	; 0x2c02 <itoa+0x3a>
    2bfe:	5d e2       	ldi	r21, 0x2D	; 45
    2c00:	51 93       	st	Z+, r21
    2c02:	10 82       	st	Z, r1
    2c04:	c9 01       	movw	r24, r18
    2c06:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <strrev>

00002c0a <strrev>:
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	67 2f       	mov	r22, r23
    2c10:	71 91       	ld	r23, Z+
    2c12:	77 23       	and	r23, r23
    2c14:	e1 f7       	brne	.-8      	; 0x2c0e <strrev+0x4>
    2c16:	32 97       	sbiw	r30, 0x02	; 2
    2c18:	04 c0       	rjmp	.+8      	; 0x2c22 <strrev+0x18>
    2c1a:	7c 91       	ld	r23, X
    2c1c:	6d 93       	st	X+, r22
    2c1e:	70 83       	st	Z, r23
    2c20:	62 91       	ld	r22, -Z
    2c22:	ae 17       	cp	r26, r30
    2c24:	bf 07       	cpc	r27, r31
    2c26:	c8 f3       	brcs	.-14     	; 0x2c1a <strrev+0x10>
    2c28:	08 95       	ret

00002c2a <_exit>:
    2c2a:	f8 94       	cli

00002c2c <__stop_program>:
    2c2c:	ff cf       	rjmp	.-2      	; 0x2c2c <__stop_program>
